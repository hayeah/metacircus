<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Metacircus</title>
 <link href="http://www.metacircus.com/atom.xml" rel="self"/>
 <link href="http://www.metacircus.com"/>
 <updated>2013-12-17T12:09:16+08:00</updated>
 <id>http://www.metacircus.com/</id>
 <author>
   <name>Howard Yeh</name>
   <email>hayeah@gmail.com</email>
 </author>

 
 <entry>
   <title>Launched, But...</title>
   <link href="http://www.metacircus.com/startup/2013/12/17/launched-but.html"/>
   <updated>2013-12-17T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/startup/2013/12/17/launched-but</id>
   <content type="html">&lt;p&gt;So &lt;a href=&quot;http://metacircus.com/startup/2013/12/09/not-launched.html&quot;&gt;last week&lt;/a&gt; my biggest problem was “not launching”. &lt;a href=&quot;http://fork2.com:3000&quot;&gt;It’s launched&lt;/a&gt;, on port 3000, lolz.&lt;/p&gt;

&lt;p&gt;It looks like a web version of an e-book… which it is.&lt;/p&gt;

&lt;p&gt;You might ask, what’s the point? There are tools (like Sphinx) out there doing this already, why bother?&lt;/p&gt;

&lt;p&gt;I’ll be the first to admit that it’s not there yet. But let’s just assume that for coding, you can significantly improve upon the learning experience over e-books. What are some ways?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Social. Connect with peers. Teaching assistant. Q &amp;amp; A.&lt;/li&gt;
  &lt;li&gt;Interactive content. Make it easy to follow along code examples.&lt;/li&gt;
  &lt;li&gt;Mobile. On-the-go experience (include coding).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Right now you don’t have any of that if you choose to learn from a book.&lt;/p&gt;

&lt;p&gt;This version is the beginning of my third product pivot. It’s embarrassing that this is all I have, but I am slowly getting a better understanding of the product I want to build, and how the product vision aligns with the long-term vision I am after.&lt;/p&gt;

&lt;p&gt;I am not a product person at all, so “product design” had been a terrible pain, and slow. Given that I don’t have product-design super power, the single most dangerous thing for me to do is to keep doing this groping-in-the-dark methodology of design.&lt;/p&gt;

&lt;p&gt;I often imagine a miniature Paul Graham hovering over my right shoulder whispering imperatives. And now he’s asking me to,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;smash a beam of prototypes into a beam of users&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The imagination of nature is greater than the imagination of man &lt;br /&gt; – Richard Feynman&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;biggest-problem-this-week&quot;&gt;Biggest Problem This Week&lt;/h2&gt;

&lt;p&gt;“Getting users” is too vague a goal for me to pursuit directly. Perhaps “Growth Hackers” have levers to pull to do that. I don’t.&lt;/p&gt;

&lt;p&gt;It’s easier for me to think about delivering value.&lt;/p&gt;

&lt;p&gt;The biggest problem this week is… &lt;em&gt;drum roll&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;not-delivering-value&quot;&gt;Not Delivering Value&lt;/h2&gt;

&lt;p&gt;The problem has two aspects to it,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What group of people?&lt;/li&gt;
  &lt;li&gt;What to give them?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I plan to provide introductory content for one emerging programming language that has an active developers community. One of &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;, &lt;a href=&quot;http://elixir-lang.org&quot;&gt;Elixir&lt;/a&gt;, or &lt;a href=&quot;http://julialang.org&quot;&gt;Julia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;P.S.&lt;/p&gt;

&lt;p&gt;The authoring tool is open-sourced at &lt;a href=&quot;https://github.com/hayeah/fork2-builder&quot;&gt;https://github.com/hayeah/fork2-builder&lt;/a&gt;. Watch the development there :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Not Launched</title>
   <link href="http://www.metacircus.com/startup/2013/12/09/not-launched.html"/>
   <updated>2013-12-09T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/startup/2013/12/09/not-launched</id>
   <content type="html">&lt;p&gt;Every week, I am going to write about the biggest problem I am having in my effort to build a startup. If that means that every week I am going to write about the same thing, then so be it.&lt;/p&gt;

&lt;p&gt;The biggest problem I have this week is that &lt;strong&gt;I don’t have a product launched&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;why-not&quot;&gt;Why Not?&lt;/h1&gt;

&lt;p&gt;You might ask a lonely person, “why not just go out and make some friends?” Similarly, it seems like such a simple problem for me to solve.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Just launch it.&lt;/li&gt;
  &lt;li&gt;Real artists ship.&lt;/li&gt;
  &lt;li&gt;Done is better than perfect.&lt;/li&gt;
  &lt;li&gt;Fail fast…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And so on.&lt;/p&gt;

&lt;h1 id=&quot;what-is-an-mvp&quot;&gt;What is an MVP&lt;/h1&gt;

&lt;p&gt;I was very excited about Lean Startup methodology when I first learned about it. But one thing about the Lean Startup movement really bothers me, and it’s how lazy it allows people to be. You are expected to validate your startup idea &lt;a href=&quot;http://startupweekend.org/&quot;&gt;in a weekend&lt;/a&gt;, or else you are wasting time and energy.&lt;/p&gt;

&lt;p&gt;To be fair, Lean Startup asks you to be cheap, not lazy. However, many people, struck by a brilliant idea at a cocktail party, would only go so far as to putting up a landing page. If nobody signed up… well that was that. Back to the office tomorrow.&lt;/p&gt;

&lt;p&gt;It’s hard for &lt;a href=&quot;http://paulgraham.com/startupideas.html&quot;&gt;good ideas&lt;/a&gt; to come by. If I think I might have a good idea, why should I give up so easily after only a simple “MVP”? I had got to do more than a landing page.&lt;/p&gt;

&lt;p&gt;What I liked better was Paul Graham’s idea of creating a “quantum of utility”, which is something that is useful enough to get some people to start talking to you.&lt;/p&gt;

&lt;p&gt;So I started coding.&lt;/p&gt;

&lt;h1 id=&quot;look-ma-no-launchable-product-and-its-cool&quot;&gt;Look Ma, No Launchable Product, and it’s cool&lt;/h1&gt;

&lt;p&gt;What I wanted to build at first was “CodeSchool as a service”. It provides an in-browser programming environment for technical book authors or open source communities to build interactive tutorials.&lt;/p&gt;

&lt;p&gt;Since I am building it for geeks, I thought I could iterate based on&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;what I wanted for myself, and&lt;/li&gt;
  &lt;li&gt;what my friends would tell me they want.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I spent about a week playing with &lt;a href=&quot;http://docker.io&quot;&gt;Docker&lt;/a&gt;, &lt;a href=&quot;http://nodejs.org&quot;&gt;NodeJS&lt;/a&gt; and the &lt;a href=&quot;http://ace.c9.io&quot;&gt;ACE Editor&lt;/a&gt;, to get familiar with what they are capable of, and see how I might use them in my project. It was a happy time.&lt;/p&gt;

&lt;p&gt;Then I spent about 10 days putting together a quick tech demo that barely worked, and showed it to my friends. Some thought it was really cool. Some asked how it could make money. Some thought meh, real programmers should learn programming with Emacs.&lt;/p&gt;

&lt;p&gt;This demo really wasn’t meant to be launched. I just wanted to make sure that I could get it to work.&lt;/p&gt;

&lt;h2 id=&quot;still-no-launchable-product&quot;&gt;Still No Launchable Product…&lt;/h2&gt;

&lt;p&gt;I was going to attend RubyConf China in October. I thought my goal was to get tech bloggers, speakers, and podcasters interested in the tool, and to create content with it. Since I positioned it as an authoring tool at the time, I didn’t think it was necessary to launch a public demo. I just wanted the content creators.&lt;/p&gt;

&lt;p&gt;I focused on designing a template language that’s easy to use, and streamlining the creative process by providing little conveniences like &lt;a href=&quot;http://livereload.com&quot;&gt;LiveReload&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sadly, when I was at the conference, I wasn’t very good at getting people to sit down with me and forcing them to see what I was building. Despite that, I &lt;em&gt;did&lt;/em&gt; talk to a few key people who were interested, which I thought justified my staying focused on building the tool.&lt;/p&gt;

&lt;p&gt;So… another month went by, and&lt;/p&gt;

&lt;h3 id=&quot;still-no-launchable-product-1&quot;&gt;STILL No Launchable Product&lt;/h3&gt;

&lt;p&gt;Officially. Not. Funny. Anymore.&lt;/p&gt;

&lt;p&gt;I’ve been going at this for 3 months now. It’d be funny if it’s not so scary on a personal level. How long could I go on without launching anything? It’s not that I haven’t DONE anything. It’s just that I haven’t accomplished anything either.&lt;/p&gt;

&lt;p&gt;One of the reasons I am starting to blog again is to tell the world: HEY! I’ve been working, I haven’t been lying around getting fat! Although I might as well have been lying around.&lt;/p&gt;

&lt;h1 id=&quot;ok-lets-fix-this&quot;&gt;Ok. Let’s Fix This&lt;/h1&gt;

&lt;p&gt;I am omitting a great many detours along the way. Frustratingly, it seems as though I am no further along the way than when I started 3 months ago.&lt;/p&gt;

&lt;p&gt;Sad face :’(&lt;/p&gt;

&lt;p&gt;But if I could walk away with a few lessons, I could still call it a win…&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The hardest thing in the world is getting people interested. &lt;strong&gt;Try way harder.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Don’t overly rely on any single individual to help you.&lt;/li&gt;
  &lt;li&gt;Friends don’t count as users.&lt;/li&gt;
  &lt;li&gt;If you can’t have strangers seeing you work, you don’t have a prototype.&lt;/li&gt;
  &lt;li&gt;If you are not launched, you haven’t got started.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So dear strangers, please allow me to &lt;strong&gt;try way harder&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;P.S.&lt;/p&gt;

&lt;p&gt;I open-sourced the authoring tool at &lt;a href=&quot;https://github.com/hayeah/fork2-builder&quot;&gt;Fork2 Builder&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Prayer to Walt Whitman</title>
   <link href="http://www.metacircus.com/writings/2012/02/27/i-pray-to-walt-whitman.html"/>
   <updated>2012-02-27T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2012/02/27/i-pray-to-walt-whitman</id>
   <content type="html">&lt;p&gt;I wish there’s more stability in me. Once I am home, I have to face
myself. Being with people is a rather poor palliative. There’s something special
about being in the wild. Neuroticism hangs in a city like a smog. None of that in
the mountains and the sea. They are too big for that.&lt;/p&gt;

&lt;p&gt;The drive is exhausting.&lt;/p&gt;

&lt;p&gt;I wish I am possessed by something more animal. Something more childish. To
insist on being a certain way because I know of no other ways.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hundred Year Companies</title>
   <link href="http://www.metacircus.com/startup/2011/11/22/hundred-year-companies.html"/>
   <updated>2011-11-22T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/startup/2011/11/22/hundred-year-companies</id>
   <content type="html">&lt;p&gt;Fred Wilson wrote a blog post on &lt;a href=&quot;http://www.avc.com/a_vc/2011/11/sustainability.html&quot;&gt;the sustainability of a
business&lt;/a&gt;. He says that
when a company finds a win-win scenario, so that its customers would benefit
while it makes profit, then the company is sustainable.&lt;/p&gt;

&lt;p&gt;Thinking about sustainability encourages long term thinking. Too few companies
do that. How might a business remain sustainable for a hundred years?&lt;/p&gt;

&lt;h2 id=&quot;what-hundred-years-companies&quot;&gt;What Hundred Years Companies?&lt;/h2&gt;

&lt;p&gt;Trading companies like the British East India Company. Financial houses like the
Rothschilds. Conglomerates like Mitsubishi. Resource companies like Exxon
Mobil. Some family wineries.&lt;/p&gt;

&lt;p&gt;There seems to be a two separate components to sustainability. One is
sustainability of a business as a profit earning entity (keeping everyone paid),
and the other is sustainability as legacy. There really aren’t that many hundred
years businesses.&lt;/p&gt;

&lt;p&gt;It seems that once a company had innovated, their sustainability is an attribute
of how well it maintains power. To last that long, a hundred years company almost
always have to be political too.&lt;/p&gt;

&lt;p&gt;It’s just really, really, really hard to remain profitable under the constant
onslaught of Schumpeterian &lt;a href=&quot;http://en.wikipedia.org/wiki/Capitalism,_Socialism_and_Democracy#Creative_destruction&quot;&gt;creative destruction&lt;/a&gt;. Capitalism’s drive for
efficiency exerts a relentless downward pressure on profit.&lt;/p&gt;

&lt;p&gt;Once a company found a way to create profit by innovating, other companies would
scramble to do the same and undercut that profit. For a company to remain
profitable in the long run, it would either have to keep innovating, or (as was
so often done) to seek to protect its profit through political means (e.g. &lt;a href=&quot;http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act&quot;&gt;SOPA&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;legacy-and-death&quot;&gt;Legacy And Death&lt;/h2&gt;

&lt;p&gt;Given that it’s so hard to remain innovative, wouldn’t it be better to let a
company die after it had been innovative, rather than sticking around to
&lt;a href=&quot;http://netscape.aol.com/&quot;&gt;interfere with new innovators&lt;/a&gt; (e.g. Microsoft)?&lt;/p&gt;

&lt;p&gt;I like what Mark Zuckerberg said (at
&lt;a href=&quot;/startup/2011/10/29/startup-school-2011.html&quot;&gt;Startupshool&lt;/a&gt;) that a company is
the best social organization to make something happen. 10 years is enough to
change the world. Do you really want a company that exists for 100 years?&lt;/p&gt;

&lt;p&gt;Apple had change the world. Or rather, Steve Jobs had. If Apple had lost its
ability to innovate, would it seek to protect its interests by exerting its
power? Do you want Apple to be a hundred years company, now that Steve Jobs is
gone? What if 100 years from now the App Store is &lt;em&gt;still&lt;/em&gt; the only way to sell
Apps?&lt;/p&gt;

&lt;p&gt;It is said that the only way for Physics to advance, old physicists would have
to die. So it is that old companies have to die to make way for innovation.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Startup School 2011 Notes</title>
   <link href="http://www.metacircus.com/startup/2011/10/29/startup-school-2011.html"/>
   <updated>2011-10-29T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/startup/2011/10/29/startup-school-2011</id>
   <content type="html">&lt;p&gt;I attended YCombinator’s StartupSchool 2011. &lt;a href=&quot;/startup/sus2011.txt&quot;&gt;You can download my notes
here&lt;/a&gt;. Some memorable quotes:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Building a company is like baking a cake… sometimes the eggs get on the roof.&lt;/em&gt;
&lt;br /&gt;– Marc Andreessen&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There’s nothing quite more permanent than a temporary business model.&lt;/em&gt;
&lt;br /&gt;– Matt Mullenweg&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You’ll spend the next 5 years of your life on your startup, don’t choose your idea lightly.&lt;/em&gt;
&lt;br /&gt;– Paul Graham&lt;/p&gt;

&lt;p&gt;&lt;em&gt;One of my more honest investors pulled me aside…&lt;/em&gt;
&lt;br /&gt;– Max Levchin&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In your heads is the future of innovation.&lt;/em&gt;
&lt;br /&gt;– Ron Conway&lt;/p&gt;

&lt;p&gt;I thought Mark Pincus’ interview with Jessica Livingston really brought these
leaders of innovation back to human scale. Though Mark Pincus is dealing with
problems a world away from what I am dealing with, he’s nevertheless figuring
things out as he goes, and fretting that he doesn’t know how.&lt;/p&gt;

&lt;p&gt;The common thread that binds all these entrepreneurs is how clueless they once
were. They learned along the way. But even now they don’t have a magic crystal
ball to look into. They don’t have an unerring instinct to guide them. They
fret. They agonize over decisions. They make mistakes. They figure things
out and learn.&lt;/p&gt;

&lt;p&gt;They are tinkerers, supremely adapt at finding something that works after
coutless attempts. They are no prophets.&lt;/p&gt;

&lt;p&gt;The one person that seems oracular is Ron Conway. He doesn’t sound very
smart. Yet he is somehow always there, at the right place at the right time with
the right people.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://news.ycombinator.com/item?id=3174530&quot;&gt;Discuss On Hacker News&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lispy Abuse of Ruby: Local Functions</title>
   <link href="http://www.metacircus.com/hacking/2011/10/23/lispy-abuse-of-ruby-local-functions.html"/>
   <updated>2011-10-23T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/hacking/2011/10/23/lispy-abuse-of-ruby-local-functions</id>
   <content type="html">&lt;p&gt;Functional languages like Lisp and Haskell make it easy to define highly
granular scopes. It’s possible to define a local function, and restrict its
scope to any arbitrary chunk of code. In Lisp (Scheme), it looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fun1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fun1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;; first element&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fun2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fun2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;; second element&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; (list 1 2)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example, &lt;code&gt;fun1&lt;/code&gt; is a helper method for building the list. And &lt;code&gt;fun2&lt;/code&gt; is
even more restrictive in scope. &lt;code&gt;fun2&lt;/code&gt; is only available for building the second
element of the list.&lt;/p&gt;

&lt;p&gt;Closer to home, you can do the same in Javascript:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fun1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fun1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fun2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fun2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})()];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately though, we need to create one anonymous function each time we want a
scope &lt;a href=&quot;#better&quot;&gt;[1]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Ruby, this is as close as it gets,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;fun1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;fun2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The scoping isn’t right. And so clumsy. How can we do better?&lt;/p&gt;

&lt;h1 id=&quot;bwahahahahahahahaha&quot;&gt;Bwahahahahahahahaha~~~~~&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module_eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This allows you to do something like&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;flet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fun1&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fun2&lt;/span&gt;
       &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;fun2&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: how do you make flet nestable? As in,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;flet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fun1&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;flet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fun2&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that in this example &lt;code&gt;fun1&lt;/code&gt; is called in the scope of the inner flet.&lt;/p&gt;

&lt;p&gt;Leave your answer in the comments ; )&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;span id=&quot;better&quot;&gt;[1]&lt;/span&gt;
It looks much better in CoffeeScript:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;coffeescript&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;fun1 = &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fun1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fun2 = &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fun2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())()]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;OK… maybe not much better.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The One Item TODO List</title>
   <link href="http://www.metacircus.com/writings/2011/10/17/one-item-todo-list.html"/>
   <updated>2011-10-17T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2011/10/17/one-item-todo-list</id>
   <content type="html">&lt;p&gt;I fail at TODO list. Every time I tried I failed in the same way. It would work
at first, and I’d feel good about the initial rush of productivity increase
(real or delusional). Then inevitably the list would get bigger, with stale
items left in it like rotten fruits. Eventually I’d abandon my TODO list.&lt;/p&gt;

&lt;p&gt;Maybe you feel the same.&lt;/p&gt;

&lt;h1 id=&quot;daily-action&quot;&gt;Daily Action&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Every night before I go to sleep, I decide what I want to do the next
day&lt;/strong&gt;. Out of the dozens of things I want/need/anxious to do, I’d pick one. Just
one. The next day I’d focus myself doing it. &lt;em&gt;Everything else I let go&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;That’s it.&lt;/p&gt;

&lt;p&gt;You don’t need to read a
&lt;a href=&quot;http://www.amazon.com/Getting-Things-Done-Stress-Free-Productivity/dp/0142000280/ref=sr_1_1?ie=UTF8&amp;amp;qid=1318836563&amp;amp;sr=8-1&quot;&gt;National Bestselling Book&lt;/a&gt;
about The System™.&lt;/p&gt;

&lt;p&gt;I’ve found that it helps to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Rephrase the goal as an action&lt;/strong&gt;. Instead of saying “practice Lean Startup methodology”, say “A/B test font-size to see if it increases Twitter following conversion rate”.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Be specific&lt;/strong&gt;. Instead of “write a blog post”, set the goal to be “write a 500 words blog post about the one item todo list”.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Have a clear ending&lt;/strong&gt;. Instead of “learn iPhone programming”, say “read 2 chapters from Beginning iPhone Programming”.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Be conservative&lt;/strong&gt;. It is more important to succeed than to be ambitious. We often overestimate how much we can do in a day, but underestimate what we can accomplish in a year. &lt;em&gt;If you consistently succeed, you are more likely to stick to it&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Write the action down&lt;/strong&gt;. The physical action of writing it down helps to clarify the action. Your action might be clear in your head, but when you try to write it down you might realize, “oh, it’s not specific enough”, or “oh, it’s not actually actionable”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Discuss on &lt;a href=&quot;http://news.ycombinator.com/item?id=3151791&quot;&gt;HackerNews&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>From The Office To Travelling The World</title>
   <link href="http://www.metacircus.com/writings/2011/09/19/from-the-office-to-travelling-the-world.html"/>
   <updated>2011-09-19T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2011/09/19/from-the-office-to-travelling-the-world</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://farm3.static.flickr.com/2444/3953133869_8b6b3e12c7.jpg&quot; alt=&quot;My Office Building&quot; /&gt;
&lt;br /&gt; &lt;em&gt;My Office Building&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;15 months ago on a sunny June Friday I decided to quit my job. I still remember
the moment. It was like falling in love. I walked out of the office onto the
street, feeling like I’ve lost half my weight. Each step I took I felt
lighter. I was walking on the moon.&lt;/p&gt;

&lt;p&gt;15 months later, I am homeless.&lt;/p&gt;

&lt;p&gt;I am in Kuala Lumpur. For the past 9 months, I’ve been travelling in Asia, and
working on the road. In 9 months, I have saved more money than when I first
started travelling, thanks to the low living cost in Asia.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It’s cheaper to travel than to stay home.&lt;/em&gt; I spend less than $1000 a month, all
in.&lt;/p&gt;

&lt;p&gt;I assume that you too want to travel. You have your reasons to travel. Or you
may not have reasons, but only an incessant urge. I want to tell you my how I
did it. Perhaps taking my experience, you can adjust it to suit the
circumstances of your life.&lt;/p&gt;

&lt;p&gt;In a nutshell: I quit my job; I failed at startup; I started doing freelancing;
I made sure I could work remotely; I took care of my affairs in Canada; I
handled the practical matters of travelling; finally, I took off to Thailand
with a one-way ticket.&lt;/p&gt;

&lt;h1 id=&quot;the-fear-and-trembling-of-quitting&quot;&gt;The Fear And Trembling of Quitting&lt;/h1&gt;

&lt;p&gt;The simple, if banal, truth about quitting is that “you’ll most likely be
fine”. The practical problems of making enough money to live (i.e. having food,
having a place to sleep) are easy to solve. The real difficulty lies elsewhere.&lt;/p&gt;

&lt;p&gt;The decision to quit is an existential choice. I think for many of us it is not
so much the steady income of a job that is difficult to give up, but the image
of who we are. Our identity is inextricably bound up with what we do.&lt;/p&gt;

&lt;p&gt;When you go to a party and people ask you what you do, it’s difficult to have a
ready answer if you don’t have a job. And the questions asked in a party over
amiable drinks are but pale shadows of the questions you will ask yourself when
you are alone.&lt;/p&gt;

&lt;p&gt;The real difficulty of quitting is taking up the responsibility to define who
you are. Or maybe you are already satisfied with who you are. In which case,
obviously, there’s no reason to quit. But if you DO decide that you want to
quit, it take a lot of courage. There’s always fear and trembling before you
take the leap.&lt;/p&gt;

&lt;p&gt;The existential worries (alas, angst) of not having a job is separate from the
practical worries of making a living, but very easy to confuse. You might worry
about paying your rent if you don’t have a job, when in fact it is the challenge
to your identity that is the true source of unrest.&lt;/p&gt;

&lt;p&gt;Here’s a simple answer to the practical worry of paying rent: don’t pay the
rent. End your lease. This is exactly what I’ve done as part of my preparation
to start travelling. The practical problem is easy. The hard part is determining
what to do if you don’t have an apartment, nor the job necessary to support that
lifestyle.&lt;/p&gt;

&lt;p&gt;Isn’t is weird that in modernity the core of our identity isn’t God, nation, or
family, but job, and all that a job would imply.&lt;/p&gt;

&lt;h1 id=&quot;preparing-for-change&quot;&gt;Preparing For Change&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://hphotos-sjc1.fbcdn.net/286163_239860299378953_100000649534996_801492_3516690_o.jpg&quot; style=&quot;width: 500px&quot; alt=&quot;Empty Sign&quot; /&gt;
&lt;span class=&quot;caption&quot;&gt; Empty Sign. Qinghai, China &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;It is not possible to change overnight. Quitting, like turning 30 (or whatever),
is just an arbitrary marker. It doesn’t magically, with a puff of smoke, make
you a different person. You need to prepare for change.&lt;/p&gt;

&lt;p&gt;The biggest danger with quitting is to carry on the same old habits and
thinking. If so, then eventually what happens is you find another job. You
shouldn’t quit today. But you should start changing now.&lt;/p&gt;

&lt;p&gt;I didn’t quit my job then immediately was able to find contract work. I didn’t
move to Asia right away and work remote, and making American wages while
enjoying Asia’s low cost of living. It took 7 months before I was able to leave
Vancouver.&lt;/p&gt;

&lt;h1 id=&quot;startup-dream-miserable-failure&quot;&gt;Startup Dream. Miserable Failure.&lt;/h1&gt;

&lt;p&gt;Immediately after quitting, I started working on my project. I was building
“reremind.me” with a friend. It’s a social network for people suffering
depression. I envisioned it as a colloborative psychotherapy platform. Inspired
by Cognitive Behavioural Therapy, and research in Learned Optimism.&lt;/p&gt;

&lt;p&gt;I thought that if people can learn techniques that would help others, then these
techniques would be precisely the same techniques that can help themselves. By
helping and comforting others suffering similar problems, they gain the
experience and clarity to help themselves.&lt;/p&gt;

&lt;p&gt;It didn’t work out.&lt;/p&gt;

&lt;p&gt;Then I worked on another idea called “jummp.in”. It didn’t work out either. By
the time I was doing jummp.in, I was starting to realize “oh shit, I have no
idea what the fuck I am doing”, in exactly those words. It wasn’t working
out.&lt;/p&gt;

&lt;p&gt;I learned frontend development though. I was strictly a backend Rails developer
before that. After that summer I could do HTML, CSS, and
Javascript/jQuery. Having these skills made me a more rounded developer, and
more attractive as a freelancer.&lt;/p&gt;

&lt;h1 id=&quot;transitioning-to-freelancing-by-being-visible&quot;&gt;Transitioning To Freelancing By Being Visible.&lt;/h1&gt;

&lt;p&gt;I had 6 months to go before I’d be out of cash and sleeping on the street.&lt;/p&gt;

&lt;p&gt;Freelancing was completely new to me. I didn’t know where to find work, how much
to charge, how to negotiate, taxes, or even how to give project estimate. I
didn’t have a lawyer, and my mom was my accountant.&lt;/p&gt;

&lt;p&gt;Contrary to all startup advice about being commited to my goal, I was
preparing for my freelancing career while I was still working on jummp.in.
I wanted to give myself plenty of time to get started.&lt;/p&gt;

&lt;p&gt;The single most important thing you need to do to start freelancing is to be
visible. One way to be visible is to have your own projects. The projects don’t
have to be popular (or even useful). They just need to be there. If a potential
client wants to see what you’ve done, you should have something to show. That
makes all the difference.&lt;/p&gt;

&lt;p&gt;Another way to achieve visibility (again, you don’t have to be famous or
popular) is going to different meetups. It is most effective if you give talks
for your local meetups. If you have your own projects, you can talk about your
projects. If you don’t have a project, you can talk about other people’s
project. But giving talks gives you instant credibility. I think it is the most
effective way to achieve visibility.&lt;/p&gt;

&lt;p&gt;While it is crucial to go to meetups and events, beware, though, of
“networking”. I am a shy person. For me, networking doesn’t come naturally.
Often I hate it so much that I just want to curl into fetal position right on
the floor and hum a lullaby to myself. But because I don’t network for pleasure,
it was easier for me to focus on what I wanted to get out of it, rather than
just having fun.&lt;/p&gt;

&lt;p&gt;When you are visible, you start to get lucky. You’d start getting referrals from
friends. The only problem is that it takes time. Having projects you can talk
about would speed up that process considerably.&lt;/p&gt;

&lt;p&gt;I started letting my friends know that I was looking for freelancing work in
mid-August. I started my first project in mid-October. The second contract
started in early November. The third contract started in late November. The
fourth one in middle of December (having finished one contract by then). Two
were remote, and two were local in Vancouver.&lt;/p&gt;

&lt;h1 id=&quot;getting-ready-to-go&quot;&gt;Getting Ready To Go&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://farm6.static.flickr.com/5007/5279903412_1faf6589d1.jpg&quot; alt=&quot;Sunset at Tofino&quot; /&gt;
&lt;span class=&quot;caption&quot;&gt;Sunset at Tofino&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;As I was picking up freelancing gigs, I got serious about travelling.
&lt;a href=&quot;http://twitter.com/romansnitko&quot;&gt;Roman Snitko&lt;/a&gt; told me that he was going to live in Thailand for 6 months, and
invited me to go. When he was there last time, he rented a new vacation condo
unit for $450 a month. The building had a roof top swimming pool overseeing the
ocean, and a gym. He said that in Thailand he could easily live for less than
$1000 all in. That blew my mind. In Vancouver, I was paying $1200 in rent
alone. I was very interested, but I wasn’t sure if I could actually work from a
different country. How about timezone difference? How good is the Internet in
developing countries?&lt;/p&gt;

&lt;p&gt;Of the first two clients I had, one was in Seattle and one was in New York, so I
already had experience with remote clients. The only problem was that I always
worked from home, where I had total control over my work environment. I’ve
always needed a very quiet place to work. The least bit of noise distracts me. I
can’t, for example, work listening to music.&lt;/p&gt;

&lt;p&gt;If I were to travel, I had to make sure that I can get work done on the road. As
an experiment, I decided to visit Tofino for a week. Tofino is a busy resort
town in the summer, famous for its surfs. In the winter though, it’s a perfect
getaway. There really wasn’t much to do there in the Winter.&lt;/p&gt;

&lt;p&gt;I met some interesting people there. People who go to a surf town in the dead of
Winter are by that selection bias pretty weird. There was a divorced man seeking
new life. He also lost his business. There was a retired programmer who did
Cobol for living. There was also a woman who was a life coach. One breakfast she
was teaching a tough looking, bouncer type of guy how to listen with more
empathy. Two geologists from the Univeristy of Alberta were crazy enough to have
gone surfing in winter’s bitter cold water. And there was a German guy who
travelled across Canada for 2 months. He couchsurfed all the way, and the only
two nights he paid was to stay in the hostel in Tofino.&lt;/p&gt;

&lt;p&gt;During the day I explored Tofino. I worked in the evening, and sometimes in the
afternoon when it rained. I averaged about 4~5 billable hours of work each
day. So the experiment went well.&lt;/p&gt;

&lt;p&gt;The solution to the noise problem? Earplugs.&lt;/p&gt;

&lt;h1 id=&quot;taking-off&quot;&gt;Taking Off&lt;/h1&gt;

&lt;p&gt;In December, I ended the lease to my beloved apartment, and moved back
home. Living with my parents, I thought, would give me the extra motivation to
move on with my life. Indeed, it was dreadful moving back. I was ready to do
everything I could to get the hell out.&lt;/p&gt;

&lt;p&gt;After the New Year, I started to prepare for the trip itself. I bought a one-way
ticket to Thailand. I renewed my passport, and got the visas for China and
India. I informed my credit card company that I’d be out of country. I bought
travel insurance. I got an international driver’s license. I changed my ATM
card’s PIN from 6 digits to 4 (some country’s ATMs can’t take 6 digit PINs). I
sold my iMac. I sold my stocks at a significant loss. I got my taxes ready for
the year.&lt;/p&gt;

&lt;p&gt;I bought the stuff I needed to travel. I wanted to travel light. I had a 25L
backpack into which I had to fit everything I need. My packing rule was that I’d
leave out anything if I wouldn’t use everyday. If I wasn’t sure I’d need
something, I’d leave it out. If I could get something locally, I’d leave it out.&lt;/p&gt;

&lt;p&gt;Two weeks before the flight, I was putting in extra hours for my clients, so I
could take a week off to adjust when I got to Thailand.&lt;/p&gt;

&lt;p&gt;On Janunary 25th, I took off.&lt;/p&gt;

&lt;h1 id=&quot;on-the-road&quot;&gt;On The Road&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://a2.sphotos.ak.fbcdn.net/hphotos-ak-snc6/269121_223365577695092_100000649534996_742558_8365642_n.jpg?dl=1&quot; alt=&quot;Mount Hua Plank Walk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;caption&quot;&gt; Plank Walk at Mount Hua. I waz there! &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In 9 months, I’ve been to Thailand, Hong Kong, Cambodia, China, Korea, and
Malaysia. The pace of my travelling is slow compared to others. A couple I met
in Korea who also travelled for 9 months had also visited India, Nepal, Laos,
Vietnam, and Australia. I took my time.&lt;/p&gt;

&lt;p&gt;I scheduled three days of work for every one or two day’s travelling. When I had
to travel by bus or train to another place, I’d take the next day or two to
work, and rest from travelling. In effect, I was alternating between work and
travel. When I was tired from working, I’d go see things. When I was tired of
travelling, I’d work on things.&lt;/p&gt;

&lt;p&gt;This system wasn’t foolproof. It failed me when I travelled to Siem Reap
to visit Angkor Wat. As I was especially tired from the trip to Siem Reap, I
took the first three days to work. I booked a guide to take me to see Angkor Wat
starting on the fourth day. Unfortunately on the third day I got a nasty skin
inflammation. I was going to tough it out and stay for two more days to see
Angkor Wat before going back to Bangkok. But by that night the inflammation was
hurting like hell and spreading. So next morning I left Cambodia, before I had a
chance to see Angkor with my own eyes.&lt;/p&gt;

&lt;p&gt;Been there, didn’t do it, but got the postcards.&lt;/p&gt;

&lt;h1 id=&quot;the-schrdingers-state-of-being&quot;&gt;The Schrödinger’s State of Being&lt;/h1&gt;

&lt;p&gt;To be sure, getting to this point wasn’t as smooth and planned as this narrative
might suggest. In reality, I met many dead ends, and went into detours. I was
fraught with doubts, and endlessly exploring different opportunities. Much of
what happend was ad hoc and opportunistic.&lt;/p&gt;

&lt;p&gt;What I didn’t tell you in this story is that while I was doing all this, I was
also interviewing for jobs. I was actively sabotaging my own plan to
travel. Luckily, I didn’t get lucky with job hunting.&lt;/p&gt;

&lt;p&gt;It seems miraculous. Life, to a great extent, cannot be planned or
predicted. Much of it depends on chance. Had I found a job, I would’ve been in
San Francisco busting my ass for a startup. My plan to travel would’ve come to
naught.&lt;/p&gt;

&lt;p&gt;Was I lucky or what?&lt;/p&gt;

&lt;p&gt;Maybe the lesson isn’t that I was lucky enough to fail to get a job. The real
lesson, rather, is a stoic appreciation for whatever life has in store. Whatever
happens to me, I should make the best of it. It is a sort of optimism. Life
always seems to work out fine in the end, one thing leading to another.&lt;/p&gt;

&lt;p&gt;In this godless age, with the absence of providence, this is perhaps one sort of
faith we can have. Have faith in life, that it would turn out alright. &lt;em&gt;Que Sera Sera.&lt;/em&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/tnmrIK1paSs&quot; frameborder=&quot;0&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;Discuss on &lt;a href=&quot;http://news.ycombinator.com/item?id=3013876&quot;&gt;Hacker News&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>6 Steps I Took From Idea To Launch</title>
   <link href="http://www.metacircus.com/hacking/2011/09/14/6-steps-i-took-from-idea-to-launch.html"/>
   <updated>2011-09-14T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/hacking/2011/09/14/6-steps-i-took-from-idea-to-launch</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://farm3.static.flickr.com/2768/4460525589_783067f199.jpg&quot; alt=&quot;wise old man&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A visitor in New York City was asking an old man for direction, “excuse me, how
do I get to Carnegie Hall?” The old man, at once senile and wise, answered:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Practice. Practice. Practice.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So it is with Lean Startup.&lt;/p&gt;

&lt;h1 id=&quot;lean-kata&quot;&gt;Lean Kata&lt;/h1&gt;

&lt;p&gt;I thought that my ideas are so great, that I just need to code, put in some
metrics, add some A/B tests, then I’d be on my way to lean epiphanies and
success. I thought that the lean approach is just a bag of techniques and tricks
that I can pick and choose as I wish. I thought I could simply graft the lean
techniques onto what I already knew: coding.&lt;/p&gt;

&lt;p&gt;I didn’t take learning seriously. So up until now, I left behind a lot of
half-hatched ideas and dead code in my wake. I felt like a murderer of
ideas.&lt;/p&gt;

&lt;p&gt;To benefit from lean thinking, I eventually realized, I had to step out of my
comfort zone with programming, and focus on the lean practice itself. That’s why
I dececided to undertake a “Lean Kata”. Like doing a Code Kata, I focused myself
on learning the lean techniques, rather than accomplishing.&lt;/p&gt;

&lt;p&gt;What follows is what I did to launch &lt;em&gt;FaceOff&lt;/em&gt;, a &lt;a href=&quot;http://getFaceOff.com&quot;&gt;Chrome
extension to block “like” button&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#s1&quot;&gt; 1. Idea &lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;#s2&quot;&gt; 2. MVP &lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;#s3&quot;&gt; 3. Coding &lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;#s4&quot;&gt; 4. Landing Page Design &lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;#s5&quot;&gt; 5. Metrics &amp;amp; A/B Testing &lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;#s6&quot;&gt; 6. Launch &lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;#s7&quot;&gt; Stats   &lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;#s8&quot;&gt; Conclusion   &lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;s1&quot;&gt; 1. Idea &lt;/h1&gt;

&lt;p&gt;For the Lean Kata, I was against using one of my own &lt;span style=&quot;text-decoration:line-through;&quot;&gt;brilliant&lt;/span&gt; retarded ideas.&lt;/p&gt;

&lt;p&gt;I noticed on Hacker News &lt;a href=&quot;http://www.jwz.org/blog/2011/09/surprise-facebook-doesnt-like-privacy-countermeasures/&quot;&gt;a blog post&lt;/a&gt; about the Facebook like
button by Jamie Zawinski. The like button tracks you even if you don’t click on
it. By merely visiting a page and loading the like button, Facebook knows that
you’ve been there. Facebook, in fact, knows more about you than your mom.&lt;/p&gt;

&lt;p&gt;The German tech site Heise linked to in Jaime Zawinsky’s post already proposed a
&lt;a href=&quot;http://www.heise.de/ct/artikel/2-Klicks-fuer-mehr-Datenschutz-1333879.html&quot;&gt;2-click like
button&lt;/a&gt;
that seemed pretty compelling. So I thought I could make a Chrome extension that
implements it.&lt;/p&gt;

&lt;p&gt;At this point, I knew that people are paranoid about Facebook. But there already
exists a Chrome extension that blocks Facebook outright. I didn’t know if people
would want a Chrome extension specifically for the 2-click like button.&lt;/p&gt;

&lt;h1 id=&quot;s2&quot;&gt; 2. MVP &lt;/h1&gt;

&lt;p&gt;I decided to take a more paranoia mongering approach. It is easier to pin the
fear to a person, than the abstract idea of privacy. So I thought I’d model the
marketing message after 1984’s “Big Brother Is Watching”, and villanize Mark
Zuckerberg. Furthermore, it would enhance the villainy by adding a profit
motive. Nobody wants to know that Facebook is going to make a cool $1B by
sacraficing our culture’s collective privacy.&lt;/p&gt;

&lt;p&gt;I made the mocks with Balsamiq and pushed it on Github. It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i467.photobucket.com/albums/rr40/hdyeh2000/facepalm_3.png&quot; alt=&quot;FaceOff Mock&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next day there were 50 watchers on the repo. I was satisfied that there was
interest for this project.&lt;/p&gt;

&lt;h1 id=&quot;s3&quot;&gt; 3. Coding &lt;/h1&gt;

&lt;p&gt;I spent the next day coding. The prototype was done that afternoon. It could
block like buttons embedded by an iframe, but not those using the Facebook
Markup Language (FBML). I spent an extra day fixing that problem.&lt;/p&gt;

&lt;p&gt;This was the easy part. In hindsight, I should’ve just moved on and work on the
landing page so I can release FaceOff earlier, and fix the problem later.&lt;/p&gt;

&lt;h1 id=&quot;s4&quot;&gt; 4. Landing Page Design &lt;/h1&gt;

&lt;p&gt;I asked my friend &lt;a href=&quot;http://twitter.com/bearwithclaws&quot;&gt;@bearwithclaws&lt;/a&gt;, of
&lt;a href=&quot;http://hackermonthly.com/&quot;&gt;Hacker Monthly&lt;/a&gt;, to do the design (you should
subscribe to his magazine, because it’s the best way to keep up with Hacker News
without having to obessively check it every 30 seconds).&lt;/p&gt;

&lt;p&gt;He came up with the idea to use Mark Zuckerberg’s profile pictures as part of
the demo. So when the like button is blocked, Mark Z. is facing away and isn’t
watching. And when the like button is enabled, Mark Z. is facing your way, and is
watching. I thought that was pretty funny, and not too malicious.&lt;/p&gt;

&lt;p&gt;We stole those pictures from Wired magazine’s &lt;a href=&quot;http://www.wired.com/techbiz/startups/news/2007/09/ff_facebook&quot;&gt;profile of Mark
Zuckerberg&lt;/a&gt;. I
guess we can afford a few good laughs until Wired send me a cease and desist
letter to take the pictures down (hopefully never).&lt;/p&gt;

&lt;p&gt;Check out the final &lt;a href=&quot;http://getfaceoff.com&quot;&gt;landing page for FaceOff&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;s5&quot;&gt; 5. Metrics &amp;amp; A/B Testing &lt;/h1&gt;

&lt;p&gt;I’ve always included Google Analytics for my projects. But to be honest, I never
learned much from Google Analytics. Rather, it is to me a fun ego booster that
allowed me to see a spike when people are checking out my stuff, and a
corresponding spike in my sense of well-being.&lt;/p&gt;

&lt;p&gt;This time I set out to do something different. I thought about the things I
wanted to find out.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What is the conversion rate for downloading the extension?&lt;/li&gt;
  &lt;li&gt;What is the conversion rate for Twitter following?&lt;/li&gt;
  &lt;li&gt;What is the conversion rate for Github watching/forking?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With these goals in mind, I could design the metrics I needed to track, rather
than vanity stats I wanted to track.&lt;/p&gt;

&lt;p&gt;I decided to try out &lt;a href=&quot;http://getclicky.com&quot;&gt;GetClicky&lt;/a&gt;, just so I can use a different tool. I learned
from &lt;a href=&quot;http://www.amazon.com/Peopleware-Productive-Projects-Teams-Second/dp/0932633439/ref=sr_1_1?ie=UTF8&amp;amp;qid=1316019451&amp;amp;sr=8-1&quot;&gt;PeopleWare&lt;/a&gt;
that a productivity gain often follow from merely doing something different. So I
thought using a different tool would force me to look at data from a fresh perspective.&lt;/p&gt;

&lt;p&gt;For the Lean Kata, I vowed to include at least one A/B test. I looked for an
obvious improvement. I decided to try &lt;a href=&quot;http://visualwebsiteoptimizer.com&quot;&gt;Visual Website
Optimizer&lt;/a&gt;, because it seems to be the
easiest way for a beginner to start A/B testing.&lt;/p&gt;

&lt;p&gt;I was expecting my A/B testing tool to prove to me that the obvious improvement
I came up with would increase conversion. The result of the A/B test was
surprising. Needless to say, A/B testing proved me wrong. I changed,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i467.photobucket.com/albums/rr40/hdyeh2000/control.png&quot; alt=&quot;control&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i467.photobucket.com/albums/rr40/hdyeh2000/variation.png&quot; alt=&quot;variation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Making the description of the extension more visual I thought was a clear
win. Yet it turned out that this “obvious improvement” resulted in a 20%
decrease in conversion rate.&lt;/p&gt;

&lt;h1 id=&quot;s6&quot;&gt; 6. Launch &lt;/h1&gt;

&lt;p&gt;I submitted FaceOff to Hacker News on a weekend. My rationale was that hackers
and entrepreneurs don’t rest on weekends, but PR firms do. So on weekends there
would be roughly the same amount of votes as weekdays, but distributed over
fewer submissions. Thus on a weekend, my submission might have a lesser risk
getting swept away by others.&lt;/p&gt;

&lt;p&gt;I got 3 friends to upvote within the first hour to increase the chance of it
appearing on the front page. (Everybody does this, right?)&lt;/p&gt;

&lt;p&gt;Then I tweeted about it. And that was that.&lt;/p&gt;

&lt;h1 id=&quot;s7&quot;&gt; Stats &lt;/h1&gt;

&lt;p&gt;I launched on September 11th.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i467.photobucket.com/albums/rr40/hdyeh2000/09-11-stats.png&quot; alt=&quot;visitors&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;10am: 235 visitors&lt;/li&gt;
  &lt;li&gt;11am: 252 visitors&lt;/li&gt;
  &lt;li&gt;12am: 265 visitors&lt;/li&gt;
  &lt;li&gt;1pm:  102 visitors &lt;/li&gt;
  &lt;li&gt;2pm:  59  visitors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://getfaceoff.com&quot;&gt;getFaceOff.com&lt;/a&gt; had 1,070 visitors that day. 729 (68%)
were Chrome users.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The extension was downloaded 238 times. Conversion rate was ~32%.&lt;/li&gt;
  &lt;li&gt;The Github repo was visited 65 times. Resulting in 6 new watchers. 0.5%.&lt;/li&gt;
  &lt;li&gt;My Twitter profile was visited 20 times. Resulting in 7 new followers. 0.6%.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There was a drop of traffic from Hacker News at around 1pm, due to the FaceOff
submission falling off from the front page. Which was surprising. It fell to
27th in rank with 19 votes, at one hour old. The 24th and 25th in rank are both
one hour old, yet with 3 votes each.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i467.photobucket.com/albums/rr40/hdyeh2000/hn-votes.png&quot; alt=&quot;HN Votes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My guess is it got flagged by a moderator. Oh well.&lt;/p&gt;

&lt;h1 id=&quot;s8&quot;&gt; Conclusion &lt;/h1&gt;

&lt;p&gt;It is an overkill to do all this for a simple Chrome extension (only 163 lines
of code). But precisely because FaceOff is so technically simple project, I
could focus my energy on learning the lean techniques. I even made 1 Malaysian
ringgit from &lt;a href=&quot;http://twitter.com/mohdrafie&quot;&gt;@mohdrafie&lt;/a&gt;. Kaching! First cent
from somebody other than my mom.&lt;/p&gt;

&lt;p&gt;Would you like to do a Lean Kata as well? &lt;a href=&quot;http://news.ycombinator.com/item?id=3001182&quot;&gt;Discuss on Hacker News&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A Lispy Abuse of Ruby</title>
   <link href="http://www.metacircus.com/hacking/2011/09/07/lispy-abuse-of-ruby-syntax.html"/>
   <updated>2011-09-07T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/hacking/2011/09/07/lispy-abuse-of-ruby-syntax</id>
   <content type="html">&lt;p&gt;I wrote a dialect of Lisp in Ruby. I call it ComaLisp. It looks like,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(ComaLisp {
   (let [:a,1], [:b, 2] {
      (defun [:foo,:a,:b,:c] {
         (let [:d, 6] {
            (list a, b, c, d)})})
      (list a, b, (foo 3, 4, 5))})})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is &lt;strong&gt;VALID&lt;/strong&gt; Ruby syntax under 1.9! I kid you not.&lt;/p&gt;

&lt;h2 id=&quot;i-have-a-confession-to-make&quot;&gt;I have a confession to make&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://p.twimg.com/AYrd9DACAAIBr7F.png&quot; alt=&quot;I Love Parens&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I love Lisp’s syntax. Or rather, the lack thereof. But people might not like
such austere minimalism. So ComaLisp has braces and curlies, and a liberal
sprinkling of commas. It is a delicious syntatic soup fortified with extra
punctuation marks. Yum.&lt;/p&gt;

&lt;h2 id=&quot;install-comalisp&quot;&gt;Install ComaLisp&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;gem install comalisp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in the IRB&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;comalisp&#39;
(ComaLisp {
   (puts &quot;hello world&quot;)
  })
# &quot;hello world&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voila!&lt;/p&gt;

&lt;h2 id=&quot;introduction-to-comalisp-list-algebra&quot;&gt;Introduction To ComaLisp: List Algebra&lt;/h2&gt;

&lt;p&gt;For the following examples, we assume that the code is run in the ComaLisp
DSL context:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(ComaLisp {
   ... code here ...
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In ComaLisp, lists and conses are simply represented by array.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(list 1, 2, 3) # =&amp;gt; [1,2,3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, the fact that lists are represented by arrays is an implementation
detail. You can’t rely on that. You should consider whatever returned by &lt;code&gt;list&lt;/code&gt;
as an abstract datatype, and only use the provided functions in ComaLisp to
operate on lists. (More pain the better, right?)&lt;/p&gt;

&lt;p&gt;The good old &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt; work as you’d expect.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(car (list 1, 2, 3)) == 1
(cdr (list 1, 2, 3)) == (list 2, 3) == [2,3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can add a new element onto the list by using &lt;code&gt;cons&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(cons 1, (list 2, 3)) == (list 1, 2, 3) == [1,2,3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, the perennial question when designing a Lisp dialect, what is the empty
list? I decided to use &lt;code&gt;[]&lt;/code&gt; as the empty list, not nil. This way the list/cons
algebra works out.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# the empty list is []
(list) == []
# the empty list is a fixpoint for car
(car (list)) == (car (car (list))) == ... == []
# the empty list is a fixpoint for cdr
(cdr (list)) == (cdr (cdr (list))) == ... == []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, because the list is represented by an array, it’s not possible to have
an improper list like in a real Lisp.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(cons 1 2) =&amp;gt; &#39;(1 . 2) # not possible
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In ComaLisp, the second argument to cons &lt;em&gt;must&lt;/em&gt; be a list&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(cons 1, (list))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;declare-local-variables&quot;&gt;Declare Local Variables&lt;/h2&gt;

&lt;p&gt;Although ComaLisp is 100% compatible with Ruby, and you can use local variables
just as in Ruby, that would be cheating. Use &lt;code&gt;let&lt;/code&gt; to declare variables in
ComaLisp!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(let [:a,1],[:b,2] {
  (list a,b)}) == (list 1, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each let defines a new scope. You can shadow variables with nested lets.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(let [:a,1], [:b,2] {
  (let [:a,3] {
     (list a, b)
   })}) == (list 3, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;define-function&quot;&gt;Define Function&lt;/h2&gt;

&lt;p&gt;Here’s how you define a function in ComaLisp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(ComaLisp {
  (defun [:foo,:a,:b] {
     (list a, b)})
  (foo 1, 2)}) == (list 1, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;invoking-function&quot;&gt;Invoking Function&lt;/h2&gt;

&lt;p&gt;ComaLisp, being a functional language, allows you to apply functions
dynamically.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# call
(ComaLisp {
  (defun [:foo,:a,:b] {
     (list a, b)})
  (call :foo, 1, 2)}) == (list 1, 2)
  
# apply
(ComaLisp {
  (defun [:foo,:a,:b] {
     (list a, b)})
  (apply :foo, [1, 2])}) == (list 1, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;oop-integration-with-ruby&quot;&gt;OOP Integration With Ruby&lt;/h2&gt;

&lt;p&gt;The best that ComaLisp has to offer is probably its tight integration with
Ruby’s powerful object system. If you have a native Ruby object, you can invoke
its methods the Lisp way,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(map [-1,-2,-3] { |e|
  (abs e)}) == [1,2,3]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;what-to-hack-on&quot;&gt;What To Hack On&lt;/h2&gt;

&lt;p&gt;If you find this interesting, feel free to fork &lt;a href=&quot;https://github.com/hayeah/ComaLisp&quot;&gt;ComaLisp&lt;/a&gt;. Two things you can hack on:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use method_missing to generate cadr, caar, cdar, cadr, etc.&lt;/li&gt;
  &lt;li&gt;ComaLisp lacks a macro system.&lt;/li&gt;
  &lt;li&gt;A REPL for ComaLisp&lt;/li&gt;
  &lt;li&gt;Port ComaLisp to JRuby, Rubinius, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What crazy ideas do you have for ComaLisp? &lt;a href=&quot;http://news.ycombinator.com/item?id=2966859&quot;&gt;Discuss on Hacker News&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Second Degree Homoiconicity</title>
   <link href="http://www.metacircus.com/hacking/2011/09/07/comalisp-second-degree-homoiconic.html"/>
   <updated>2011-09-07T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/hacking/2011/09/07/comalisp-second-degree-homoiconic</id>
   <content type="html">&lt;p&gt;Is &lt;a href=&quot;http://metacircus.com/hacking/2011/09/07/lispy-abuse-of-ruby-syntax.html&quot;&gt;ComaLisp&lt;/a&gt; homoiconic?&lt;/p&gt;

&lt;p&gt;I wish it is, so I did some research to see if I can argue that it is. (If I can
argue that it is already homoiconic, then I don’t have to work to make it so).&lt;/p&gt;

&lt;p&gt;The origin of the term is from &lt;a href=&quot;http://en.wikipedia.org/wiki/Homoiconicity&quot;&gt;TRAC&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Because TRAC procedures and text have the same representation inside and outside the processor, the term homoiconic is applicable, from homo meaning the same, and icon meaning representation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By this definition, ComaLisp is not homoiconic, because the Ruby interpreter
executes AST, not the source text. However, with some work, ComaLisp could be
second degree homoiconic.&lt;/p&gt;

&lt;p&gt;There is the gem &lt;a href=&quot;http://liveast.rubyforge.org/&quot;&gt;LiveAst&lt;/a&gt;. It can turn a method or block into AST. It also adds Kernel#ast_eval. With LiveAst, we can achieve 2nd-degree homoiconicity in Ruby,&lt;/p&gt;

&lt;p&gt;Text =&amp;gt; AST =&amp;gt; Interpreter =&amp;gt; AST =&amp;gt; Text&lt;/p&gt;

&lt;p&gt;Whereas a conventional Lisp would be 1st-degree homoiconic, i.e.,&lt;/p&gt;

&lt;p&gt;AST =&amp;gt; Interpreter =&amp;gt; AST&lt;/p&gt;

&lt;h2 id=&quot;is-thinking-homoiconic&quot;&gt;Is Thinking Homoiconic?&lt;/h2&gt;

&lt;p&gt;If the “stuff” of thought is the same as thought itself, then it is 1st-degree
homoiconic. But if language is an intermediary of thought, and thought itself is
a meta-language (see
&lt;a href=&quot;http://www.amazon.com/Foundations-Language-Meaning-Grammar-Evolution/dp/0199264376/ref=sr_1_2?ie=UTF8&amp;amp;qid=1315366216&amp;amp;sr=8-2&quot;&gt;Jackendoff&lt;/a&gt;),
then the it is 2nd-degree homoiconic.&lt;/p&gt;

&lt;p&gt;Discuss on &lt;a href=&quot;http://news.ycombinator.com/item?id=2968276&quot;&gt;Hacker News&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Happiness Begets Creativity</title>
   <link href="http://www.metacircus.com/writings/2011/09/04/happiness-begets-creativity.html"/>
   <updated>2011-09-04T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2011/09/04/happiness-begets-creativity</id>
   <content type="html">&lt;p&gt;Creativity is not constant. Some days I am happier
than others, and those days ideas overrun me. The
lead weight of self-consciousness is made buoyant
by the lightness of heart. On creative days, I am
not just lighter. I become weightless. I float.&lt;/p&gt;

&lt;p&gt;When I am creative, it’s not so much that I get
better ideas. Rather, because I feel happier,
everything seems better. When I am happy, I am
more willing to listen to myself, so I get more
ideas. And given more ideas, some of them would be
good.&lt;/p&gt;

&lt;p&gt;Don’t torture your brain to be creative when you
don’t feel good. Just give up trying. It’s like
wringing sap out of dry dead wood. Instead, work
harder to be happy. But beware of the fallacy of
wanting to fix your life in some big way. It won’t
make you any happier. Instead, pay attention to
the little details in life that matter. The
moments make you happy.&lt;/p&gt;

&lt;p&gt;Who have you appreciated today?&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;splash&quot;&gt;
 &lt;img alt=&quot;Boy playing. Shanghai back alley.&quot; title=&quot;Boy playing. Shanghai back alley.&quot; src=&quot;http://i467.photobucket.com/albums/rr40/hdyeh2000/IMG_4838.jpg&quot; /&gt;
 &lt;i&gt; Boy playing. Shanghai. &lt;/i&gt;
&lt;/span&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Travelling is Slow Suicide</title>
   <link href="http://www.metacircus.com/writings/2011/08/24/travelling-is-slow-suicide.html"/>
   <updated>2011-08-24T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2011/08/24/travelling-is-slow-suicide</id>
   <content type="html">&lt;p&gt;Chatting, I said that “选择长期旅行应该算是一种慢性自杀。环境的变化一点一滴地渗
透，而取代了原来的自我”.  Choosing long-term tavel is perhaps a kind of slow
suicide. The changes in the environment slowly saturate me, and replace my
original self bit by bit.&lt;/p&gt;

&lt;p&gt;I was baffled by why people wouldn’t do anything to change their lives if they didn’t
like it. Why wouldn’t they quit their jobs? They have the money, what are they
afraid of? A friend asked me if I thought of that people may not want to travel
like me. Which struck me as true.&lt;/p&gt;

&lt;p&gt;I remembered how much I hated my life. It was easy for me to give up everything
and go. I have zero regret that I did. It may be true that a person hates his
job, and hates his boss. But there are other things they are not willing to give
up. Often a good life is putting up with things you don’t like so you may enjoy
things you do value. Maybe for some people a shit job is a fair trade to be able
to watch TV at home after work. Being content, why would they want to travel?&lt;/p&gt;

&lt;p&gt;Being unhappy made me desperate for change. So here I am, in Kuala Lumpur. The
sky is very blue, and the food very good.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://a2.sphotos.ak.fbcdn.net/hphotos-ak-ash4/299570_248300875201562_100000649534996_830495_921594_n.jpg&quot; alt=&quot;Petrona Towers. Actually Pretty Cool.&quot; /&gt;
Petrona Towers. Actually pretty cool.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Playing Git Like A Violin</title>
   <link href="http://www.metacircus.com/hacking/2011/02/18/play-git-like-a-violin.html"/>
   <updated>2011-02-18T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/hacking/2011/02/18/play-git-like-a-violin</id>
   <content type="html">&lt;p&gt;People think that playing the violin is hard. But
that’s only when you are learning and
practicing. When you are &lt;em&gt;actually&lt;/em&gt; playing, it’s
as natural as breathing. So it is with Git. After
a couple years of use, and the help of a few
aliases, my git usage now comes as easily as music
from a familiar piece:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git caa
git ca
git s
git l
git r1
git rh 330183
git s
git d
git cm &#39;a new commit&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of us at one point or another kept a private
cheat sheet of common git commands. I know I
did. After a while, I gained enough experience
with Git to know the common tasks that I do all
the time. These common tasks I have created
aliases for.&lt;/p&gt;

&lt;p&gt;Very often, after I’ve made a commit, I’d keep
wanting to make small fixes to it, like fussing
around with spaces, or renaming variables, or
rewording the comments, or minor refactoring of
the code. These changes are too small to worth
their own commits (that would only clutter up the
history). So I’d rather if these changes belong to
the commit I already have. I’d do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -a --amend -C HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This adds all the changes to the staging area, and
commit it as an amendment to the previous commit,
using the same commit message. Effectively, I am
saying: “put whatever I’ve done into the previous
commit.”&lt;/p&gt;

&lt;p&gt;For this usage pattern, I have created an alias in
my &lt;code&gt;~/.gitconfig&lt;/code&gt;, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[alias]
  caa = commit -a --amend -C HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then ever after, I’d type &lt;code&gt;git caa&lt;/code&gt; whenever I
wanted to do the same thing. Another pattern I use
a lot is to create a commit for the changes I’ve
done, all in one step:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -a -m &#39;commit message&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This I’d create another alias:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[alias]
  cma = commit -a -m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then ever after, I’d type &lt;code&gt;g cma&lt;/code&gt;. 90% of the
time, &lt;code&gt;git caa&lt;/code&gt; and &lt;code&gt;git cma&lt;/code&gt; cover my commit
needs. If you ask me what they stand for, I
honestly can’t tell you, because these commands
are so short, they are ingrained in my muscle
memory. I don’t think about what I am doing with
Git, just as when I am playing an arpegio on the
violin, I don’t think about the notes
individually.&lt;/p&gt;

&lt;p&gt;Here are all my git aliases. I hope you find some
of them useful to integrate into your Git
workflow.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[alias]
  # I like using the interactive mode to make complex commits
  ai = add --interactive

  # All the aliases relate to commits. Note that
  # they are grouped by common prefixes, so I don&#39;t
  # confuse what I want done by accident.
  c = commit
  # commit with a message
  cm = commit -m
  cma = commit -a -m
  # amending the previous commit
  ca = commit --amend
  caa = commit -a --amend -C HEAD

  # reset
  ## soft resets
  r = reset
  r1 = reset HEAD^
  r2 = reset HEAD^^
  ## hard resets
  rh = reset --hard
  rh1 = reset HEAD^ --hard
  rh1 = reset HEAD^^ --hard

  # shortcuts for commands
  s = status
  d = diff
  a = add
  co = checkout
  b = branch
  l = log
  f = fetch
  r = reset
  p = push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cherry on top: I aliased &lt;code&gt;g&lt;/code&gt; as &lt;code&gt;git&lt;/code&gt; in my bash
shell. What I actually do is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;g caa
g ca
g s
g l
g r1
g rh 330183
g s
g d
g cm &#39;a new commit&#39;
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Forest Song</title>
   <link href="http://www.metacircus.com/writings/2011/02/06/forest-song.html"/>
   <updated>2011-02-06T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2011/02/06/forest-song</id>
   <content type="html">&lt;p&gt;I dreamed of us as a tree, and my limbs growing
into yours, and you swallowing me up with your
embrace. This growth is driven by life, and binds
us by life. And slowly we are dying, by growing
into one.&lt;/p&gt;

&lt;p&gt;We worry not where we are going, or where we are,
for the sun comes to us, and the rain sweetens our
life. Our roots anchor us to Earth, that massive
stability. Yet our branches and leaves extend into
the Heavens, light as air, and exuberant, free as
birds.&lt;/p&gt;

&lt;p&gt;So we do not fear the wind, as if it breaks your
limb, I too, would feel the pain. Nor the
lightning, for it shall consume us both with
fire. Having grown into each other, enough time,
we will die, and rot. Then the Earth will take us
back, and create more dreams of trees.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Who Brought Fire?</title>
   <link href="http://www.metacircus.com/writings/2010/05/22/who-brought-fire.html"/>
   <updated>2010-05-22T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2010/05/22/who-brought-fire</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;Bread is the most everyday and familiar of foods, the sturdy staff of life on which hundreds of generations have leaned for sustenance. It also represents a truly remarkable discovery, a lively pole on which the young human imagination may well have vaulted forward in insight and inspiration. For our prehistoric ancestors it would have been a startling sign of the natural world’s hidden potential for being transformed, and their own ability to shape natural materials to human desires. –  Harold McGee &lt;em&gt;On Food And Cooking&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Only a food writer could sing a semi-religious paean to bread. “A
lively pole on which the young human imagination may well have vaulted
forward”, really?&lt;/p&gt;

&lt;p&gt;But going meta, each profession perhaps is wont to overestimate its
importance to humanity. Fact is, there had been so many turning points
in the history of humanity. Fire. Language. Agriculture.
Bread. Citystate. The Gutenberg press. Sanitation. The Internet. Paris
Hilton.&lt;/p&gt;

&lt;p&gt;These “turning points” are not revolutionary. It’s not like one day we
don’t have the Internet, the next day we do. It took time. An idea
needs to take root in society, and grow into it. It is not the idea
itself, but the society accepting that idea, and reifying an almost
ghostly abstraction to concrete things that affect real lives. Society
is the soil into which ideas are sow.&lt;/p&gt;

&lt;p&gt;Turning points are invented after the fact. The hero that brought fire
to humanity was not Prometheus, but the moms that used it to make food.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Just One Thing</title>
   <link href="http://www.metacircus.com/writings/2010/04/20/one-thing.html"/>
   <updated>2010-04-20T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2010/04/20/one-thing</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;The greatest weight.&lt;/em&gt; What, if some day or night a demon were to steal afer you into your loneliest loneliness and say to you: “This life as you now live it and have lived it, you will have to live once more and innumerable times more; and there will be nothing new in it, but every pain and every joy and every thought and sigh and everything unutterably small or great in your life will have to return to you, all in the same succession and sequence– even this spider and this moonlight between the trees, and even this moment and I myself. The eternal hourglass of existence is turned upside down again and again, and your with it, speck of dust!”
Would you not throw yourself down and gnash your teeth and curse the demon who spoke thus? Or have you once experienced a tremendous moment when you would have answered him: “You are a god and never have I heard anything more divine.” If this thought gained posession of you, it would change you as you are or perhaps crush you. The question in each and every thing, “Do you desire this once more and innumerable times more?” would like upon your actions as the greatest weight. Or how well disposed would you have to become to yourself and to life to &lt;em&gt;crave nothing more fervently&lt;/em&gt; than this ultimate confirmation and seal? – &lt;em&gt;The Gay Science&lt;/em&gt;, Aphorism 341&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s never too late. Just one thing is enough to make it all
worthwhile.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>What is The Opposite of a Fork?</title>
   <link href="http://www.metacircus.com/writings/2010/04/19/what-is-the-opposite-of-a-fork.html"/>
   <updated>2010-04-19T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2010/04/19/what-is-the-opposite-of-a-fork</id>
   <content type="html">&lt;p&gt;It is always tempting to think in dualistic terms: us vs them, black
and white, dark and light, work and play, life and death, love and
hate. It seems natural that for any X, there’s always the opposite of
X.&lt;/p&gt;

&lt;p&gt;“If you are not a liberal, then you are a conservative.”&lt;/p&gt;

&lt;p&gt;Many of these “opposites” are nonsense. Marvin Minsky in &lt;a href=&quot;http://www.amazon.com/Society-Mind-Marvin-Minsky/dp/0671657135/ref=sr_1_1&quot;&gt;The Society of Mind&lt;/a&gt;
has a wonderful example, where he asks “what is the opposite of a
fork?”  Is it a spoon? Or is it a knife? Sometimes “the opposite”
simply doesn’t exist.&lt;/p&gt;

&lt;p&gt;The way we think in opposites can sometimes be dysfunctional. I don’t
want to be poor, so I must be rich. I don’t want to remain unmarried,
so I should get married. I don’t want to live anymore (for example),
so I must kill myself.&lt;/p&gt;

&lt;p&gt;The problem with all these “opposites” is that they are only opposites
by definition. They are just words. In life, though, being unmarried
or married has much more complex ramifications than the uncomplicated
fact of having a marriage certificate or not. Remaining a bachelor
entails one set of life patterns, and marriage another. That I don’t
want to be a bachelor (for example) does not cleanly lead to the
adoption of marriage.&lt;/p&gt;

&lt;p&gt;Of course, reality be as it may, my thinking still prefers to ignore
it, and think in opposites. So whenever I find myself thinking in
opposites that seem too neat, I become suspicious, and remind myself
of the question “what is the opposite of a fork?” When abstract ideas
work out too neatly, details are invariably sacrificed.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>PHP is Plenty Good</title>
   <link href="http://www.metacircus.com/hacking/2010/04/17/real-values.html"/>
   <updated>2010-04-17T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/hacking/2010/04/17/real-values</id>
   <content type="html">&lt;p&gt;Many hackers I respect say how great Jon Bentley’s &lt;a href=&quot;http://www.amazon.com/Programming-Pearls-2nd-Jon-Bentley/dp/0201657880&quot;&gt;&lt;em&gt;Programming
Pearls&lt;/em&gt;&lt;/a&gt;
is. I finally bought my own copy, and it really is that good. I am
reading column 6, &lt;em&gt;Perspective on Performance&lt;/em&gt;, which starts with a
case study about optimizing the n-body problem, done by Andrew
Appel. Initially, for n=10000, it would take a year, and at the end,
it took less than a day, more than 400x improvement. I was so struck
by the story, that I stopped reading, to quote the case in full:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Algorithms and Data Structures.&lt;/em&gt; Appel’s first priority was to find an efficient algorithm. He was able to reduce the O(n^2) cost per time step to O(n log n) by representing the physical objects as leaves in a binary tree; higher nodes represent clusters of objects. The force operating on a particular object can be approximated by the force exerted by the large clusters; Appel showed that this approximation does not bias the simulation. The tree has roughly log n levels, and the resulting O(n log n) algorithm is similar in spirit to the divide-and-conquer algorithm in Section 8.3. This change reduced the run time of the program by a factor of 12.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Algorithm Tuning.&lt;/em&gt; The simple algorithm always uses small time steps to handle the rare case that two particles come close to one another. The tree data structure allows such pairs to be recognized and handled by a special function. That doubles the time step size and thereby halves the run time of the program.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Data Structure Reorganization.&lt;/em&gt; The tree that represents the initial set of objects is quite poor at representing later sets. Reconfiguring the data structure at each time step costs a little time, but reduces the number of local calculations and thereby halves the total run time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Code Tuning.&lt;/em&gt; Due to additional numerical accuracy provided by the tree, 64-bit double-precision floating point numbers could be replaced by 32-bit single-precision numbers; that change halved the run time. Profiling the program showed that 98 percent of the run time was spent in one function; rewriting that code in assembly language increased its speed by a factor of 2.5.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Hardware.&lt;/em&gt; After all the above changes, the program still required &lt;strong&gt;two days of time on a departmental machine that cost a quarter of a million dollars&lt;/strong&gt;, and several runs of the program were desired. Appel therefore moved the program to a slightly more expensive machine equipped with a floating point accelerator, which halved its run time again.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;End quote. &lt;strong&gt;QUARTER OF A MILLION DOLLARS&lt;/strong&gt;! &lt;em&gt;1985 dollars&lt;/em&gt;.  That is
amazing. The length to which Appel had gone for performance tuning had
&lt;em&gt;REAL&lt;/em&gt; values, not just some idle academic challenge.&lt;/p&gt;

&lt;p&gt;This case also reminds me to ask tough questions: what is it about
what I do, how I do it, that has &lt;em&gt;ramifications in reality&lt;/em&gt;?. How much
value are my tests worth? How much value is my continuous integration
setup? Do I have an expectation of what and how much feature X would
give me, so at least I know if I had fallen short of that expectation.&lt;/p&gt;

&lt;p&gt;There are metrics that clearly matters. How much profit am I making?
How fast is my audience growing? These are fine, hard facts. But I
don’t even know where to begin to find out if the “intangibles” matter
at all. How do I even know that my code is “maintainable”? What does
it mean for my code to be “well tested”? I certainly have a sense of
Beauty (without the scare-quotes), but again, can I afford Beauty?&lt;/p&gt;

&lt;p&gt;Lacking any good evidence, perhaps all we have to go on is common
sense. Beyond a certain point, whatever practice that we adopt can
become a fetish. Does 100% test coverage matter? Most likely not. If
absolute reliability is crucial, say nuclear reactor control, you
don’t get reliability out of test coverage anyway. Reliability comes
out of redundancy.&lt;/p&gt;

&lt;p&gt;Some testing is surely good, so my common sense (qua experience) tells
me, but when does it become a fetish? Does code metric matter? My
common sense (qua maybe prejudice) says it’s bullshit.&lt;/p&gt;

&lt;p&gt;For everything, there’s a point of diminishing return. Extreme
programming’s motto is that if X is good, then more X the
better. Testing is good, so test always. Which is obviously insane,
but probably said to be provocative. Individually we have to decide
when good enough is enough. Sometimes good is more than enough, so a
waste of time.&lt;/p&gt;

&lt;p&gt;And stepping out a bit, I have serious doubt that minute technical
decisions matter. Programming anxieties such as how we mock objects,
or if we are violating Single Responsibility Principle, or we have
hard couplings, or a class has too many dependencies, or we violate
the Law of Demeter… maybe none of it really matters.&lt;/p&gt;

&lt;p&gt;What matters is to have your product out there for people to use. PHP
is plenty good, and Ruby (or your favourite toy) won’t save you from
shit business idea.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rhetorical Rationality</title>
   <link href="http://www.metacircus.com/writings/2010/04/16/rhetorical-rationality.html"/>
   <updated>2010-04-16T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2010/04/16/rhetorical-rationality</id>
   <content type="html">&lt;p&gt;Thinking of ourselves as rational creatures, we often resort to
rhetorical techniques to sound rational rather than putting in the
effort to actually think. As David Hume pointed out, an argument is
often invented after we have already decided on a conclusion. So an
argument is rhetorical in the sense that it is designed to persuade
so-called “rational beings”. We do not generally arrive at Truth via
an argument.&lt;/p&gt;

&lt;p&gt;That be as it may, a good argument is still appreciated. Sometimes
though, we are too lazy even to come up with a good one. Rather, we
resort to cheap rhetorical tricks to appear rational.&lt;/p&gt;

&lt;p&gt;A common device is to come up with lists of three. For some reason,
the number three has a magical appeal to the mind. The classic list of
three, of course, being the syllogism:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;All men are mortal.&lt;/li&gt;
  &lt;li&gt;Socrates is a man.&lt;/li&gt;
  &lt;li&gt;Socrates is mortal.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;which is unassailable from a purely definitional point of view, which
is fine as a demonstration of formal logic. But we often take the
syllogistic skeleton to give nonsense apparent logical rigour, like
so:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Capitalism promotes personal freedom.&lt;/li&gt;
  &lt;li&gt;Freedom is good.&lt;/li&gt;
  &lt;li&gt;Capitalism is good.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s nonsense. Capitalism is not wholely good. Such a complex cluster
of ideas as Capitalism simply cannot fit into the framework of
syllogistic structure. Yet we do something like this all the time.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I need money.&lt;/li&gt;
  &lt;li&gt;A job makes me money.&lt;/li&gt;
  &lt;li&gt;I need a job.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Again, the inattentive mind would simply glide through the points
without thinking. Even though the “argument” is blatantly fallacious,
the rhetorical technique is seductively effective.&lt;/p&gt;

&lt;p&gt;In fact, any list of three would trigger a sense of satisfaction in
the “rational” mind. Why do I need a car?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I often take people around.&lt;/li&gt;
  &lt;li&gt;It rains a lot in Vancouver.&lt;/li&gt;
  &lt;li&gt;I can show off.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As soon as I reach three points, I am satisfied. But of course, there
are often more than three points. And sometimes there are less than
three points. But we would still feel powerfully drawn to pad the list
to make three, perhaps by making a slight variation on an existing
point.&lt;/p&gt;

&lt;p&gt;So I avoid lists of three. I always try to think more. Failing that, I
try to condense, to see if there is a unifying idea behind the points.
Stopping at three, I am being lazy.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Proc.new And Lambda Are Only 99.9% the Same</title>
   <link href="http://www.metacircus.com/hacking/2010/04/13/Proc-new-and-lambda-are-only.html"/>
   <updated>2010-04-13T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/hacking/2010/04/13/Proc-new-and-lambda-are-only</id>
   <content type="html">&lt;p&gt;Proc.new And Lambda Are Only 99.9% the Same. Which is to say, not at
all the same. 99.9% of the time it’s ok to use lambda, proc, and
Proc.new interchangeably. So I do (shame on me).&lt;/p&gt;

&lt;p&gt;I prefer using lambda when I am doing functional style programming in
Ruby, passing around many closures, because the syntax is less chunky
than Proc.new. Trivial preference that shouldn’t matter.&lt;/p&gt;

&lt;p&gt;Except that it does. And it hurts a lot when it does.&lt;/p&gt;

&lt;p&gt;Most of the time I get away with it… but Chinese has a lovely
saying, a moral admonition, that “the more you walk the dark road, the
more ghouls you &lt;em&gt;will&lt;/em&gt; see.” So sooner or later I am bound to run into
an edge case that makes my code to behave in unexpected ways.&lt;/p&gt;

&lt;p&gt;This kind of bugs are especially insidious, since I’ve been
conditioned (or, I’ve conditioned myself) to think that Proc.new and
Lambda are the same. On some level I know they are different, of
course, but I am so used to using them interchangeably, that there’s a
lacuna in my vision that makes it hard to suspect the problem could
arise from using Lambda instead of Proc.new, or vice versa.&lt;/p&gt;

&lt;p&gt;I had a recent bug that boils down to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def test1
  yield([1,2])
end

def test2(&amp;amp;block)
  block.call([1,2])
end

pr = Proc.new { |(a,b)| [a,b] }
fn = lambda { |(a,b)| [a,b] }
p test1(&amp;amp;pr) # =&amp;gt; [1,2]
p test1(&amp;amp;fn) # =&amp;gt; [1,2]
p test2(&amp;amp;pr) # =&amp;gt; [1,2]
p test2(&amp;amp;fn) # =&amp;gt; wrong number of arguments (1 for 2) (ArgumentError)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why doesn’t it work? It turns out that lambda is stricter than block
about the argument list. The arity for both &lt;code&gt;fn&lt;/code&gt; and &lt;code&gt;pr&lt;/code&gt; is actually
two. While a lambda complains, a Proc.new magically takes apart the
array argument.&lt;/p&gt;

&lt;p&gt;The weird part is, &lt;code&gt;fn&lt;/code&gt; and &lt;code&gt;pr&lt;/code&gt; behave the same way if they are
&lt;code&gt;yield&lt;/code&gt;ed to, but not when they are being &lt;code&gt;block.call&lt;/code&gt;ed. Yay for
random Ruby esoteric trivia.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bonus round&lt;/em&gt;. We know that the &lt;code&gt;return&lt;/code&gt; keyword returns from lambda,
regardless of where lambda closure was created (unlike Proc.new, for
which &lt;code&gt;return&lt;/code&gt; always return from the method context where the
Proc.new closure was created). But…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def test1(&amp;amp;block)
  block.call
end

test1(&amp;amp;lambda { return }) # ok

def test2
  yield
end

test2(&amp;amp;lambda { return }) # unexpected return (LocalJumpError)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, the return preserves its semantic if called via
&lt;code&gt;block.call&lt;/code&gt;, but not when &lt;code&gt;yield&lt;/code&gt;ed, exactly the opposite as in the
previous case. Pretty weird huh? That’ll be on Thursday’s quiz.&lt;/p&gt;

&lt;p&gt;Now, for a trick question.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;b = Proc.new { |(a,b)| [a,b] }
b.call(1,2) # ok
b.call(3,4) # fails
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why does it fail? Hint, it’s fixed in Ruby1.9. And this bug I actually
ran into in production code. It was not as balatant as this example,
and involves indeterminism introduced by threads. So that was a lot of
fun in the painful sense of the word, in the butt.&lt;/p&gt;

&lt;p&gt;The moral of the story is that the Python Zen, TOOWTDI (There’s Only
One Way To Do It), is a sage advice. But Ruby isn’t Python, as there
are many ways to chunkify a bacon. So the responsibility is on us
individually. If there’s no compelling reason to use one approach over
the other, &lt;em&gt;always&lt;/em&gt; (*) go with the same default.&lt;/p&gt;

&lt;p&gt;(*) Confession: for a while, I only used &lt;code&gt;if&lt;/code&gt;, and never
&lt;code&gt;unless&lt;/code&gt;. Srly. I’ve since given that up. This is a good example
of Poe’s Law, “Without a winking smiley or other blatant display of
humor, it is impossible to create a parody of Fundamentalism that
SOMEONE won’t mistake for the real thing.”&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Exploring Ruby Internals with GDB and DTrace</title>
   <link href="http://www.metacircus.com/hacking/2010/04/11/exploring-ruby-internals.html"/>
   <updated>2010-04-11T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/hacking/2010/04/11/exploring-ruby-internals</id>
   <content type="html">&lt;p&gt;It is always very hard to learn a large code base, especially
initially, when there’s not even a vague idea of how things fit into a
structure. This overall picture of the code base is the crucial first
step. After that, it becomes much easier to see an arbitrary fragment
of code, and guess what it does.&lt;/p&gt;

&lt;p&gt;It is this first step that’s the hardest. It is a gestalt process,
where out of a sea of random information miraculously emerges
understanding. I would pretty much pick a place, and start to randomly
walk through the files, then hope for the best.&lt;/p&gt;

&lt;p&gt;It’s hard. But GDB and DTrace can help! (Though now you have three
problems instead of one.)&lt;/p&gt;

&lt;h1 id=&quot;whats-going-on&quot;&gt;What’s Going On?&lt;/h1&gt;

&lt;p&gt;First, we need to figure out what’s going on. The plan is to evaluate
a Ruby expression, and let DTrace tell us what are involved. Let’s
just start the irb. We also want to know the pid of the irb, so DTrace
and GDB can get a handle of it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; irb
&amp;gt; 1 + 1
=&amp;gt; 2 #win!
&amp;gt; Process.pid
=&amp;gt; 31415 # or whatever.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we’ll write a DTrace script to peek into it,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# function_calls.d
pid31415:ruby:rb_*:entry {
  @obj[probefunc] = count();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and run it in another terminal session,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; sudo dtrace -s function_calls.d -p 31415
dtrace: script &#39;object.d&#39; matched 1175 probes
# Go back to the irb and run stuff.
# When you are happy, hit interrupt
^C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and get a dump of all the ruby functions being called while evaluating
the expression you typed into irb:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
rb_gc_force_recycle                                              76
rb_ivar_get                                                     168
rb_newobj                                                       199
rb_call                                                         323
rb_call0                                                        323
rb_eval                                                         840
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this, we get a rough idea of what functions are important in the
interpreter. Right off the bat, you know &lt;code&gt;rb_eval&lt;/code&gt; is central to the
interpreter. But &lt;code&gt;rb_gc_force_recycle&lt;/code&gt;, what is that? Uh, NVM, let’s
keep going. How do I find &lt;code&gt;rb_eval&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Before you get greppy, let’s go into GDB.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; gdb ruby 31415
(gdb) info func rb_eval
All functions matching regular expression &quot;rb_eval&quot;:
File eval.c:
VALUE rb_eval_cmd(VALUE, VALUE, int);
VALUE rb_eval_string(const char *);
VALUE rb_eval_string_protect(const char *, int *);
VALUE rb_eval_string_wrap(const char *, int *);
static VALUE rb_eval(VALUE, NODE *);
(gdb)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh wow, and I know the type information too. And look, I also found
out about &lt;code&gt;rb_eval_string&lt;/code&gt;. I guess it evals a string?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gdb) p rb_eval_string(&quot;false&quot;)
$7 = 0  # uh, ok?
(gdb) p rb_eval_string(&quot;true&quot;)
$8 = 2  # hm, i guess it&#39;s a magic constant
(gdb) p rb_eval_string(&quot;nil&quot;)
$9 = 4  # another magic constant
(gdb) p rb_eval_string(&quot;1&quot;)
$10 = 3 # wtf?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Turns out that a Ruby &lt;code&gt;VALUE&lt;/code&gt; is just a pointer type. If the least
significant bit is 1, then it’s an integer, if it’s 0, then it’s a
ruby object. We shift right by one bit to get back the integer value.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gdb) p rb_eval_string(&quot;10&quot;)
$13 = 21
(gdb) p rb_eval_string(&quot;5+5&quot;) &amp;gt;&amp;gt; 1
$17 = 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yup. And 0 is false, 2 is true, nil is 4. These are common values, so
it makes sense to use magic constants. In particular, false is 0,
because more than just a convention, that helps with CPU’s speculative
execution (I guess?).&lt;/p&gt;

&lt;p&gt;I am curious about arrays too. No problem! No need to ask GOD, ask GDB.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gdb) info func rb_array
All functions matching regular expression &quot;rb_array&quot;:
(gdb) # oops. nothing? let me try again
(gdb) info func rb_ary
static VALUE rb_ary_transpose(VALUE);
static VALUE rb_ary_uniq(VALUE);
static VALUE rb_ary_uniq_bang(VALUE);
static VALUE rb_ary_unshift_m(int, VALUE *, VALUE);
static VALUE rb_ary_values_at(int, VALUE *, VALUE);
static VALUE rb_ary_zip(int, VALUE *, VALUE);
(gdb) # bingo!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think it’s pretty awesome that we can learn all this stuff without
even going into the source code. Maybe by know you want to see some
code?  Is it time now to download Ruby source, and fire up your
favourite editor? Maybe not.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gdb) list rb_eval
2950
2951    static VALUE
2952    rb_eval(self, n)
2953        VALUE self;
2954        NODE *n;
2955    {
2956        NODE * volatile contnode = 0;
2957        NODE * volatile node = n;
2958        int state;
2959        volatile VALUE result = Qnil;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whoooo! I didn’t even have to grep.&lt;/p&gt;

&lt;p&gt;Arthur C. Clarke said that any sufficiently advanced technology is
indistinguishable from magic. Magic already took place some 25 years
ago! GDB is like IRB on steroid for the Ruby internals on a pony.&lt;/p&gt;

&lt;p&gt;Now let’s play around some more with DTrace! …&lt;/p&gt;

&lt;p&gt;But I am tired. I’ll write about DTrace in a post.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Live It. And Dream Some More</title>
   <link href="http://www.metacircus.com/writings/2010/04/07/lecture-7-on-nietzsche.html"/>
   <updated>2010-04-07T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2010/04/07/lecture-7-on-nietzsche</id>
   <content type="html">&lt;p&gt;I always feel the pressure that I gotta be somewhere, I gotta do
something, I gotta be somebody. Being goal-driven, there’s always the
sense that &lt;em&gt;something&lt;/em&gt;, when it is finally achieved, will provide a
lasting satisfaction.&lt;/p&gt;

&lt;p&gt;Maybe I am kidding myself. Maybe it doesn’t make sense to think of the
good life like some Platonic ideal. Life should be let lived. Let it
grow, organically, unexpectedly, but not according to some idea of
perfection.&lt;/p&gt;

&lt;p&gt;Maybe life isn’t about being content. Maybe another idea of good life
is one of endless restlessness, unquenchable desires. To desire life
so much, so deeply, so intensely, every waking moment, and then dream
some more of it at night…&lt;/p&gt;

&lt;p&gt;The idea that there could be a perfection of being where I could be free
of worries, longings, sadness, hopes, wants, regrets, is
intellectually seductive. That wonderful illusion of coherency comes
only at the expense of ignoring life.&lt;/p&gt;

&lt;p&gt;I am watching a lecture series on Nietzsche’s philosophy. Every
lecture I receive something wonderfully life-affirming. Lecture 7 was
concluded thusly,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Schopenhauer ultimately seems to think that meaning, purpose, is to be found in a kind of rationality. That’s what Kant thought. Nevertheless, what Nietzsche points out, and I think very powerfully, is that the meaning of life is to be found not in reason, not in rationality, not in some calculation, much less in theology, but the meaning of life is to be found in the passions, that it’s creativity, it’s being devoted to causes, it’s being dedicated to something – another person, a project, an art. That’s what gives life meaning. And so pessimism is overcome as the aesthetic phenomenon, not as a reason, not as a rational enterprise, but, rather, by something you really care about, something you feel deeply passionate about.  – &lt;em&gt;Robert Soloman&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rather than seeking perfection, I could see life as a dynamic process,
continuously unfolding. It is music, and we all dance to it.&lt;/p&gt;

&lt;p&gt;Meaning isn’t some ghostly Platonic gift. God is dead, and soon
enough, we will all be dead. What Meanings are to be found in the
ruins of religions and philosophy? Meaningfulness is a feeling. It
comes right out of living.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If your life burned well, poetry is just the ash. – &lt;em&gt;Leonard Cohen&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>Poor Shylock</title>
   <link href="http://www.metacircus.com/writings/2010/04/02/poor-shylock.html"/>
   <updated>2010-04-02T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2010/04/02/poor-shylock</id>
   <content type="html">&lt;p&gt;Greentea said that all my characters are depressed. Nothing good ever
happens to them. All lonely, and never find love.&lt;/p&gt;

&lt;p&gt;I thought a bit, to come up with a story with a good ending: A guy has
a beloved. I kill off his beloved arbitrarily. The guy feels sad. He
misses his beloved terribly. He wants her back. He searches for
her. He dreams of her. Eventually, the guy goes crazy, and
hallucinates the girl. He’s happy again.&lt;/p&gt;

&lt;p&gt;An image of happiness doesn’t really come to mind. I can recall
moments of bliss from my life. But happiness seems to imply a
contentedness I’ve never had. I am always fighting something.&lt;/p&gt;

&lt;p&gt;“I am happy” doesn’t say much about what the person is happy
about. People can say that “I am happy” in the most incredible
circumstances. Not being able to say “I am happy” almost seems
immoral. Why am I not getting the most out of life? And I am
ungrateful of what I have in life.&lt;/p&gt;

&lt;p&gt;* * *&lt;/p&gt;

&lt;p&gt;A story with a happy ending doesn’t really have anything to do with
happiness. Life isn’t like that. Prince and princess finally get
married, but the story doesn’t end there, and they don’t live happily
ever after. They grow old and die. The princess, perhaps, would die of
childbirth. The prince, likely, my be poisoned by a coveting sibling.&lt;/p&gt;

&lt;p&gt;I think that a happy ending is satisfying not because we vicariously
experience that bliss. Rather, the craving for a happy ending is a
social instinct. Seeing the author putting the characters through all
sorts of fanciful tortures, our natural empathy is evoked to wish the
pain be lifted. And we sit uncomfortably until the story resolves
favourably for the characters. When the pain lifts for the characters,
the pain lifts for us as well.&lt;/p&gt;

&lt;p&gt;It’s a vicarious act of virtue. We don’t need to do anything, but we
get the same feel-good-ness of having helped someone. Happy endings
are psychologically satisfying.&lt;/p&gt;

&lt;p&gt;What that means, then, is that a happy ending cannot exist by
itself. The characters must suffer enough to evoke our empathy, so
they deserve the reward when it comes. Even though no magic would
protect the hero from certain death; the dead heroine would stay
dead; power wins; good things never last; we can’t all be happy…&lt;/p&gt;

&lt;p&gt;But then, being cynical is the opposite problem of wanting cheap happy
endings. It feels smart to be cynical. Oh, I am no fool, I know how the
government really is!&lt;/p&gt;

&lt;p&gt;Reality is never that simple. It’s neither entirely good nor entirely
bad. There’s no such thing as a happy ending or bad ending. Things end
favorably for some people, and unfavorably for others. Antonio’s gain
is Shylock loss. It is only a good ending because the reader is
manipulated to side with Antonio, so the empathy belongs all to
him.&lt;/p&gt;

&lt;p&gt;Poor Shylock, persecuted Jew.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Why Not?</title>
   <link href="http://www.metacircus.com/writings/2010/04/01/why-not.html"/>
   <updated>2010-04-01T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2010/04/01/why-not</id>
   <content type="html">&lt;p&gt;&lt;em&gt;They would never have met in life. But here they are, in death,
sharing a bench at a deserted station, waiting for the train to come
to take them away. A withered old man, and a young man in his 20s.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;B: I bet you can’t guess how old I am.&lt;/p&gt;

&lt;p&gt;A: 85? How old are you?&lt;/p&gt;

&lt;p&gt;B: I had my 97th birthday 2 weeks ago. My wife had long passed away. I
wonder if I’d see her again, hah. We never said goodbye. She died
suddenly, you know. I remember we used to go to the same diner every
Thursday for burgers. Burgers weren’t evil, then. Nowadays burgers are
supposed to kill. Maybe that’s what did her in. The diner went out of
business soon enough. Oh it’s so long ago. I am so old. I am old. An
old curmudgeon. I wet my bed now, ha. Perhaps I lived too long, ha
ha. I am 97 years old. I smoked all my life. All those cigarettes
finally killed me, ha ha… How old are you?&lt;/p&gt;

&lt;p&gt;A: 25.&lt;/p&gt;

&lt;p&gt;B: When I was 25, I had my first son! A boy! My god, you can’t
imagine. I don’t imagine you are married?&lt;/p&gt;

&lt;p&gt;A: No.&lt;/p&gt;

&lt;p&gt;B: You can’t imagine what it’s like to have son. Gotta try it sometime
[nudges the young man]. Or maybe it’s too late, ho ho. Well, maybe
there’s a next life. Never too late, they say.&lt;/p&gt;

&lt;p&gt;A: People say that. There’s a next life. I don’t believe it.&lt;/p&gt;

&lt;p&gt;B: Maybe you ought to believe it. That’s your only chance to have a
son.&lt;/p&gt;

&lt;p&gt;A: Maybe I don’t?&lt;/p&gt;

&lt;p&gt;B: Maybe you don’t. Maybe you don’t. But I had a house, and I built it
myself. It was small at first. My family grew, and the house grew. My
grandson has the house now. He’s an architect. Have I told you? And
he loves my house. He tells people his grandpaw built it.&lt;/p&gt;

&lt;p&gt;A: What happened to your son?&lt;/p&gt;

&lt;p&gt;B: Well, he’s not getting the house. No way he’s getting the house.&lt;/p&gt;

&lt;p&gt;A: Why not?&lt;/p&gt;

&lt;p&gt;B: He died, that’s why, ha ha. He died young, actually. My wife, the
poor woman was hit the hardest.&lt;/p&gt;

&lt;p&gt;A: Oh. Sorry.&lt;/p&gt;

&lt;p&gt;B: You want to know how he died?&lt;/p&gt;

&lt;p&gt;A: I wasn’t going to ask.&lt;/p&gt;

&lt;p&gt;B: But you want to know how he died? He killed himself. A bullet right
through his brain.&lt;/p&gt;

&lt;p&gt;A: Oh. Sorry to hear that.&lt;/p&gt;

&lt;p&gt;B: Can you imagine that? Putting a gun into your mouth and pulling the
trigger. The bastard. He just killed himself. Son of a bitch. Poor son
of a bitch.&lt;/p&gt;

&lt;p&gt;A: Hmmm.&lt;/p&gt;

&lt;p&gt;B: I never understood why. His wife left him. OK. But he’s got a son
to raise. He just left the kid behind. When I see my son again, by
god, I am going to give him a good spank. My wife, she cried at
night. She’d lock herself in the bathroom. She’d never say anything
about it, and She’d never admit to it when I asked. I’d never forgive
my son for having done that to her.&lt;/p&gt;

&lt;p&gt;A: He didn’t do that to you.&lt;/p&gt;

&lt;p&gt;B: How do you mean?&lt;/p&gt;

&lt;p&gt;A: We don’t mean to hurt people.&lt;/p&gt;

&lt;p&gt;B: Hmmmph. Say, how did you die?&lt;/p&gt;

&lt;p&gt;A: Well…&lt;/p&gt;

&lt;p&gt;B: Bullshit.&lt;/p&gt;

&lt;p&gt;A: Ya.&lt;/p&gt;

&lt;p&gt;B: Why did you do it?&lt;/p&gt;

&lt;p&gt;A: I don’t know. I don’t know why I killed myself. I don’t know why I
was born. I certainly didn’t mean to hurt anyone. It doesn’t make any
difference whether I was there or not.&lt;/p&gt;

&lt;p&gt;B: So here you are.&lt;/p&gt;

&lt;p&gt;A: So here I am.&lt;/p&gt;

&lt;p&gt;B: You are 25?&lt;/p&gt;

&lt;p&gt;A: Ya. I was.&lt;/p&gt;

&lt;p&gt;B: And you’ve had enough?&lt;/p&gt;

&lt;p&gt;A: Uh…&lt;/p&gt;

&lt;p&gt;B: How did you do it?&lt;/p&gt;

&lt;p&gt;A: Gun.&lt;/p&gt;

&lt;p&gt;B: [Fascinated. Turns his body towards the young man.] So you’ve had
enough? At 25? You’ve not married. You’ve not built your own house?
You’ve not watched your son growing up, and then his son. And you’ve
not had the chance to attend your own son’s funeral, har har. You’ve
had enough??&lt;/p&gt;

&lt;p&gt;A: I had nothing to look forward to. Why would I want to get married?
Because people do? Why do I want to build my own house? Who the fuck
build their own houses now? I’ve had enough. It was my way of
maximizing my happiness.&lt;/p&gt;

&lt;p&gt;B: You don’t have to build your own house, no. Hey, you don’t have to
find a pretty girl to marry if you don’t want to. But why wouldn’t
you? My wife and I were high school sweethearts. I remember asking her
out for the prom. I was SURE she’d say no. I guess nobody else tried
their luck on her, ha ha. But hey, I am not saying you have to be like
me… you could… what’s your name?&lt;/p&gt;

&lt;p&gt;A: Will.&lt;/p&gt;

&lt;p&gt;B: Willy. I am John. My wife calls me Johnny, but you can call me
Jack.&lt;/p&gt;

&lt;p&gt;Will: Ok.&lt;/p&gt;

&lt;p&gt;Jack: So Willy…&lt;/p&gt;

&lt;p&gt;Will: Don’t you think it’s too late to talk about this?&lt;/p&gt;

&lt;p&gt;Jack: No. Heck, it’s never…&lt;/p&gt;

&lt;p&gt;Will: Anyway, there’s no next life. It’s just a rumour. &lt;/p&gt;

&lt;p&gt;Jack: You think this is it?&lt;/p&gt;

&lt;p&gt;Will: I dunno.&lt;/p&gt;

&lt;p&gt;Jack: Don’t you want another chance?&lt;/p&gt;

&lt;p&gt;Will: I wouldn’t know what to do with it. Maybe you should have
another go at it. You seem to have enjoyed it.&lt;/p&gt;

&lt;p&gt;Jack: Ha! No. I’ve had enough. I’ve built my own house. And I loved my
wife. My son… bah. My grandson, oh he’s wonderful. I’ve had
enough. This is enough.&lt;/p&gt;

&lt;p&gt;Will: You’ve had no regrets?&lt;/p&gt;

&lt;p&gt;Jack: Regrets! Hell ya. That nurse at the home is cute. I wish I could
have a go at her. She’s old enough to be your mother though, ha
ha. Say, uh… uh… [gesturing] uh…&lt;/p&gt;

&lt;p&gt;Will: Will.&lt;/p&gt;

&lt;p&gt;Jack: Ya Will, what is it that makes you want to live? You know, you
wake up every morning, and you think to yourself, “another day, and by
God, I am gonna grab it by the balls.” You know what I am saying?&lt;/p&gt;

&lt;p&gt;Will: If I had known, I wouldn’t be here, would I?&lt;/p&gt;

&lt;p&gt;Jack: There weren’t things you wanted to do?&lt;/p&gt;

&lt;p&gt;Will: Sure. I’d like to see Rome.&lt;/p&gt;

&lt;p&gt;Jack: So… why are you here? You should be in Rome!&lt;/p&gt;

&lt;p&gt;Will: Bah! What difference does it make now? [Looks away.]&lt;/p&gt;

&lt;p&gt;Jack: Look, son, you are still so young. You really shouldn’t be here,
talking to an old geezer like me. You should see Rome. You should go
back.&lt;/p&gt;

&lt;p&gt;Will: Go back? Don’t be ridiculous! Who do you think I am… Houdini?
I blew my brain out. The mortician probably had to put the pieces of
my skull back together and clean me up good for the funeral. Which, of
course, was none of my business. I am already here, there’s no going
back. I hope there’s nothing going forward.&lt;/p&gt;

&lt;p&gt;Jack: So you are one of them.&lt;/p&gt;

&lt;p&gt;Will: Them what?&lt;/p&gt;

&lt;p&gt;Jack: Them… ex… ex… ex commune.. ist.&lt;/p&gt;

&lt;p&gt;Will: Existentialist?&lt;/p&gt;

&lt;p&gt;Jack: Ya, ya. That.&lt;/p&gt;

&lt;p&gt;Will: I am over-educated, alright.&lt;/p&gt;

&lt;p&gt;Jack: Well do you have somebody you care about?&lt;/p&gt;

&lt;p&gt;Will: Yes.&lt;/p&gt;

&lt;p&gt;Jack: And you don’t give a damn?&lt;/p&gt;

&lt;p&gt;Will: [Flares] I do! [Breaks] And I am sorry… I am really sorry. But
I just can’t. I just… I just can’t. I told her it’s not her
fault. There’s nothing more she could do. She’s done everything for
me. And I am really sorry.&lt;/p&gt;

&lt;p&gt;Jack: Why?&lt;/p&gt;

&lt;p&gt;Will: I don’t know. [pauses] Anyway, here I am.&lt;/p&gt;

&lt;p&gt;Jack: So here you are. You know, I’ve never forgiven my son. And I
don’t think I ever will.&lt;/p&gt;

&lt;p&gt;Will: I don’t expect her to forgive me.&lt;/p&gt;

&lt;p&gt;Jack: But I still love him.&lt;/p&gt;

&lt;p&gt;Will: I am sure you do.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Silence befalls them. They share the bench, as two strangers would,
as though the conversation never took place.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A train comes into the station. The conductor approaches the two men
and examines their tickets. He returns the ticket to the young man,
and gestures him to keep waiting. Then the conductor takes the old
man’s luggage, helps the old man to get up, then onto the train.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The train leaves the station. The young man is left alone on the
deserted platform. He takes out a picture from his pocket. He says
something to the woman in the picture, then he kisses her. Then he
puts the picture back into his pocket. He waits.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Glass Chamber</title>
   <link href="http://www.metacircus.com/writings/2010/03/30/the-glass-chamber.html"/>
   <updated>2010-03-30T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2010/03/30/the-glass-chamber</id>
   <content type="html">&lt;p&gt;&lt;em&gt;I’ve been told that if only we could hear each other, then we would
fall in love. What separates us, always, isn’t space, but vacuum. We
can be close, yet never be together. We stand facing each other, but
are incapable of seeing each other. So it is, we are doomed to eternal
loneliness. Yearning for a love, clearly seen, within grasp, but
separated by a glass wall.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The woman is trapped in a glass chamber, and the man, lost in his
wandering, chanced upon her, finds her suffocating, slowly dying
from her own exhalation. Only a sheet of glass separates them,
extending from floor to ceiling. They cannot hear each other, but they
can feel the vibration of each others’ movements.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The woman sits on the floor, her back against the glass wall, with a
book in her lap, not reading. The man sees her, hesistates, glances at
his watch, then decides to approach. He says hi.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Man: Hi.&lt;/p&gt;

&lt;p&gt;Woman: [Does not hear him].&lt;/p&gt;

&lt;p&gt;M: [Louder] Well, HELLO.&lt;/p&gt;

&lt;p&gt;W: [No movement].&lt;/p&gt;

&lt;p&gt;M: [Kneels down. Knocks gently on the glass wall.] Hi.&lt;/p&gt;

&lt;p&gt;W: [No movement].&lt;/p&gt;

&lt;p&gt;M: Hmmm. [Weighs the circumstance. Looks at his watch. Thinks. Knocks again.] Hello.&lt;/p&gt;

&lt;p&gt;W: [No movement].&lt;/p&gt;

&lt;p&gt;M: What is your name? Why are you here by yourself?&lt;/p&gt;

&lt;p&gt;W: [No movement].&lt;/p&gt;

&lt;p&gt;M: Right. [Stands up, readys himself to leave. Pause.] Sigh. [Walks away.]&lt;/p&gt;

&lt;p&gt;. . .&lt;/p&gt;

&lt;p&gt;. . .&lt;/p&gt;

&lt;p&gt;W: [Closes her book. Looks at the ceiling.]&lt;/p&gt;

&lt;p&gt;. . .&lt;/p&gt;

&lt;p&gt;. . .&lt;/p&gt;

&lt;p&gt;M: [Dashes onto stage, jumping, stomping madly outside the glass chamber.]&lt;/p&gt;

&lt;p&gt;W: [Senses the vibration. Startled, turns around and sees the man.]&lt;/p&gt;

&lt;p&gt;M: Oh, hi. [smiles]&lt;/p&gt;

&lt;p&gt;W: [Mouthes something.]&lt;/p&gt;

&lt;p&gt;M: Ya, pleased to meet you too. What are you doing here all by yourself?&lt;/p&gt;

&lt;p&gt;W: [Looks at the man.]&lt;/p&gt;

&lt;p&gt;M: Me? Oh, nothing. Passing by. I’ll be on my way.&lt;/p&gt;

&lt;p&gt;W: [Blinks.]&lt;/p&gt;

&lt;p&gt;M: Say, what are you reading?&lt;/p&gt;

&lt;p&gt;W: [Blinks.]&lt;/p&gt;

&lt;p&gt;M: [Points at the book.] Book. What are you [points at her], reading?&lt;/p&gt;

&lt;p&gt;W: [Blinks. Holds up the book. Puzzled.]&lt;/p&gt;

&lt;p&gt;M: Yes. What is it about?&lt;/p&gt;

&lt;p&gt;W: [She says something.]&lt;/p&gt;

&lt;p&gt;M: What is it? [Cups his ear against the glass wall.]&lt;/p&gt;

&lt;p&gt;W: [She says something.]&lt;/p&gt;

&lt;p&gt;M: I can’t hear. [Flattens himself against wall.] Say again?&lt;/p&gt;

&lt;p&gt;W: [She repeats, cupping her mouth by his ears.]&lt;/p&gt;

&lt;p&gt;M: Hmmm.&lt;/p&gt;

&lt;p&gt;W: [Looks at the man. Gestures something.]&lt;/p&gt;

&lt;p&gt;M: Hmmm. [Fumbles his pockets.] Pen. Pen. Ah here [shows it to the
woman. Smiles. Fumbles again.]. Paper… paper… Damn, anything will
do…&lt;/p&gt;

&lt;p&gt;W: [Rumages her bag. She finds paper, holds it against the wall.]&lt;/p&gt;

&lt;p&gt;M: [Laughs.] Well…&lt;/p&gt;

&lt;p&gt;W: [Frustrated. Crumbles the paper, and toss it away. She sits down
again, turning her back at the man.]&lt;/p&gt;

&lt;p&gt;M: Hey, hey… what’s wrong? [Pause.] You are upset?&lt;/p&gt;

&lt;p&gt;W: [No response.]&lt;/p&gt;

&lt;p&gt;M: That’s fine. [Looks at his watch.] Gotta be on my way. [Steps
away.] Sigh. That’s fine. [Looks at his watch again.] That’s fine. [Walks
away.]&lt;/p&gt;

&lt;p&gt;W: [Jumps up. Spins around, and pounds on the glass wall with both her fists.]&lt;/p&gt;

&lt;p&gt;M: [Turns back to face her. He rushes back.] What’s wrong?!&lt;/p&gt;

&lt;p&gt;W: [Mouthes something.]&lt;/p&gt;

&lt;p&gt;M: I can’t hear!!!&lt;/p&gt;

&lt;p&gt;W: [Frantic. Breaking down.]&lt;/p&gt;

&lt;p&gt;M: What is it??&lt;/p&gt;

&lt;p&gt;W: [Wails.]&lt;/p&gt;

&lt;p&gt;M: Fuck. Fuck. Fuck. Calm down. What is it? What’s wrong?&lt;/p&gt;

&lt;p&gt;W: [Flails her arms wildly.]&lt;/p&gt;

&lt;p&gt;M: I don’t understand. What is it?&lt;/p&gt;

&lt;p&gt;W: [Tries to calm herself.]&lt;/p&gt;

&lt;p&gt;M: There, there, that’s good. Breath. Take it slowly.&lt;/p&gt;

&lt;p&gt;W: [Takes deep breaths.]&lt;/p&gt;

&lt;p&gt;M: That’s right. Breath… Breath.&lt;/p&gt;

&lt;p&gt;W: [She breathes. Then she chokes.]&lt;/p&gt;

&lt;p&gt;M: [He pounds on the glass wall.] I’ll get you out.&lt;/p&gt;

&lt;p&gt;W: [She sits back down. Still choking.]&lt;/p&gt;

&lt;p&gt;M: I’ll get you out! [Slams his body against the glass wall.] I’ll get you out…&lt;/p&gt;

&lt;p&gt;W: [Curls into a ball. Her back heaving. Choking, and sobbing.]&lt;/p&gt;

&lt;p&gt;M: I’ll get you out. [Runs off stage.]&lt;/p&gt;

&lt;p&gt;. . .&lt;/p&gt;

&lt;p&gt;. . .&lt;/p&gt;

&lt;p&gt;. . .&lt;/p&gt;

&lt;p&gt;M: [Walks onto stage dragging a sledgehammer.] I’ll get you out… [He
swings the sledgehammer through the glass wall. It shatters into a
million pieces, the fragments rains down on them both. He lets the
hammer slip by the side, then kneels beside the woman.] Are you ok?
[He holds her in his arms, and sweeps her hair back.]&lt;/p&gt;

&lt;p&gt;W: [Comes to consciousness.] Who are you?&lt;/p&gt;

&lt;p&gt;M: Just passing by.&lt;/p&gt;

&lt;p&gt;W: Did you do this?&lt;/p&gt;

&lt;p&gt;M: What?&lt;/p&gt;

&lt;p&gt;W: [Sobs.] Did you shatter the glass chamber? You did this?&lt;/p&gt;

&lt;p&gt;M: [Considers.] Yes.&lt;/p&gt;

&lt;p&gt;W: Why?&lt;/p&gt;

&lt;p&gt;M: You were choking.&lt;/p&gt;

&lt;p&gt;W: [Cries.] I was waiting for him. Now’ve you shattered it, he will
never come back. I will never see him again. Now I have no place to
weep. How will I live? Where do I go?&lt;/p&gt;

&lt;p&gt;M: Oh. [He lets her go.] I don’t know… I didn’t know…&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The man looks at his watch, dusts himself off, and walks off the
stage. The woman picks up her book, and walks off the other side. The
lone sledgehammer rests in the center of the stage, with a million
fragments of shattered hope.&lt;/em&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Circle of Hope</title>
   <link href="http://www.metacircus.com/writings/2009/11/02/circle-of-hope.html"/>
   <updated>2009-11-02T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2009/11/02/circle-of-hope</id>
   <content type="html">&lt;p&gt;A daemon sat by himeslf crying, for he no longer could fly. There were still so many blessings and love in his charge to give, but he could no longer fly. The joy and happiness he must share, but could not, weighed heavily on his shoulders, anchoring him to Earth.&lt;/p&gt;
&lt;p&gt;So the daemon of happiness and joy became known among the villagers for his profound sorrow. A river of tear ran through the village, springing from where he sat. But the water was too bitter for fish to thrive.&lt;/p&gt;
&lt;p&gt;&amp;#8220;If only the sun would come out for long enough,&amp;#8221; muttered the daemon, crying into his hands, &amp;#8220;then the wetness that weighs down my wings would evaporate, so I can fly again.&amp;#8221; But the sun never did come out for long enough, so the daemon kept crying into his river of tear.&lt;/p&gt;
&lt;p&gt;Parents warned their children of ever going near the unlucky daemon, for fear of their drowning in his sorrow.&lt;/p&gt;
&lt;p&gt;One day a little girl from the city came to visit, picking daisies and finding four-leaf clovers in the meadow. She was delighted to find the meadow where the daemon sat blooming with daisies of all kinds and constellations of the lucky clovers, nourished by his tear.&lt;/p&gt;
&lt;p&gt;There she met the crying daemon. With daisy petals and clovers in her hands, happy as only a child could be, she looked at the crying daemon. Not knowing who he was, the girl asked,&lt;/p&gt;
&lt;p&gt;&amp;#8220;Why are you crying?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&amp;#8220;My wings are heavy with wetness, so I cannot fly.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&amp;#8220;But they will dry. Will they not?&amp;#8221;&lt;/p&gt;
&lt;p&gt;&amp;#8220;The sun never comes out for long enough.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&amp;#8220;Your wings are heavy because they are wet with your tear. You don&amp;#8217;t have to wait for the sun. All you need is to stop crying,&amp;#8221; said the naive little girl.&lt;/p&gt;
&lt;p&gt;&amp;#8220;Stop crying?&amp;#8221; the daemon blinked, &amp;#8220;but my wings are wet, and I cannot fly.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&amp;#8220;Well&amp;#8230; there,&amp;#8221; the little girl kissed the daemon on the forehead, &amp;#8220;you can stop crying now.&amp;#8221;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Do You Believe in X?</title>
   <link href="http://www.metacircus.com/writings/2009/11/01/i-believe-in-x.html"/>
   <updated>2009-11-01T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2009/11/01/i-believe-in-x</id>
   <content type="html">&lt;p&gt;&lt;i&gt;There had been a long pause in the car. The silence between them was punctuated by occasional comments on random things, and questions more meant to be rhetorical than answered, as well as superficial agreements and disagreements to reassert their familiarty with each other. The words uttered were less meant to go through, than to hang about in the air, and let fade like incense.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;A. Do you believe in X?&lt;/p&gt;
&lt;p&gt;B. Why do you ask? I have had X. I must have. But I am not sure if I believe in X. Or what it even means.&lt;/p&gt;
&lt;p&gt;A. You know, to believe in X enough, that you have the courage to want it, and to get it. To believe in X enough, that when you have it, you know you have it.&lt;/p&gt;
&lt;p&gt;B. I wouldn&amp;#8217;t say I believe in X.&lt;/p&gt;
&lt;p&gt;A. You&amp;#8217;ve never had X?&lt;/p&gt;
&lt;p&gt;B. That&amp;#8217;s not what I said.&lt;/p&gt;
&lt;p&gt;A. What do you mean? How can you have had X but not believe in it?&lt;/p&gt;
&lt;p&gt;B. I don&amp;#8217;t know. It&amp;#8217;s just strange. To hold X in your hand, you don&amp;#8217;t really have to ask anything. Is this really X? Do I believe in X? Of course, you have X, right in front of you. You can feel its weight, its warmth, its moistness, and its firmness. But then X starts to go away, and the desperation of wanting to hold on to it&amp;#8230;&lt;/p&gt;
&lt;p&gt;A. But even when I feel most surely of X, I still ask. It is not out of doubt, I think.&lt;/p&gt;
&lt;p&gt;B. X is like an indigestion.&lt;/p&gt;
&lt;p&gt;A. What?&lt;/p&gt;
&lt;p&gt;B. Uh&amp;#8230; when I eat too much, blood goes to my stomach, and I can&amp;#8217;t really think.&lt;/p&gt;
&lt;p&gt;A. I don&amp;#8217;t get it.&lt;/p&gt;
&lt;p&gt;B. That&amp;#8217;s what X is like to me.&lt;/p&gt;
&lt;p&gt;A. So you don&amp;#8217;t ask. But then how do you know?&lt;/p&gt;
&lt;p&gt;B. I ate a whole lot of food, then immediately after I predictably feel the indigestion. Ditto with X.&lt;br /&gt;
A. You are not making any sense at all.&lt;/p&gt;
&lt;p&gt;B. Maybe I am not.&lt;/p&gt;
&lt;p&gt;A. I DO believe in X. And I think you do as well.&lt;/p&gt;
&lt;p&gt;B. That&amp;#8217;s interesting. Should I say &amp;#8220;I believe in X&amp;#8221;, to affirm your believing of my believing of X? You know, just to be friendly.&lt;/p&gt;
&lt;p&gt;A. Please do.&lt;/p&gt;
&lt;p&gt;B. I believe in X.&lt;/p&gt;
&lt;p&gt;A. But you don&amp;#8217;t mean it?&lt;/p&gt;
&lt;p&gt;B. I meant it. I meant what I said to you. But I am not sure what it was exactly I did say.&lt;/p&gt;
&lt;p&gt;A. It&amp;#8217;s not that hard, you know.&lt;/p&gt;
&lt;p&gt;B. No it&amp;#8217;s not that hard.&lt;/p&gt;
&lt;p&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;B. Do you believe in Y?&lt;/p&gt;
&lt;p&gt;A. What?&lt;/p&gt;
&lt;p&gt;B. Do you believe in Y?&lt;/p&gt;
&lt;p&gt;A. You are just repeating the question. It doesn&amp;#8217;t make sense.&lt;/p&gt;
&lt;p&gt;B. Why not? I believe in Y.&lt;/p&gt;
&lt;p&gt;A. You CAN&amp;#8217;T believe in Y. Is the question even grammatically correct?&lt;/p&gt;
&lt;p&gt;B. Sure it is. I believe in X. And I believe in Y.&lt;/p&gt;
&lt;p&gt;A. And you want me to believe in Y?&lt;/p&gt;
&lt;p&gt;B. No. You can&amp;#8217;t believe in Y. I want to hear you say you believe in Y.&lt;/p&gt;
&lt;p&gt;A. You just want me to say that?&lt;/p&gt;
&lt;p&gt;B. Ya.&lt;/p&gt;
&lt;p&gt;A. Uh&amp;#8230; I believe in Y.&lt;/p&gt;
&lt;p&gt;B. Excellent. I believe in Y too.&lt;/p&gt;
&lt;p&gt;A. I am happy we agree.&lt;/p&gt;
&lt;p&gt;B. Me too.&lt;/p&gt;
&lt;p&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;A. I am hungry.&lt;/p&gt;
&lt;p&gt;B. For X?&lt;/p&gt;
&lt;p&gt;A. For food. I am hungry.&lt;/p&gt;
&lt;p&gt;B. I am not hungry yet.&lt;/p&gt;
&lt;p&gt;A. I &lt;span class=&quot;caps&quot;&gt;BELIEVE&lt;/span&gt; you are hungry.&lt;/p&gt;
&lt;p&gt;B. Oh. Maybe I am hungry. Hmmm, what do I like to eat?&lt;/p&gt;
&lt;p&gt;A. You are so hungry, you&amp;#8217;d eat anything.&lt;/p&gt;
&lt;p&gt;B. I can sense it now! Ahh, right there, the hunger pang.&lt;/p&gt;
&lt;p&gt;A. There, make a right turn.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;They pulled the car into McDonald&amp;#8217;s. He turned down the music, and turned off the engine. They emerged from the car into the chill of the night. Both shivering, they huddled together across the parking lot. They walked under the Golden Arch, and disappeared, hand-in-hand, enveloped in the glow of white florescent light.&lt;/i&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Rant Lovely</title>
   <link href="http://www.metacircus.com/hacking/2009/04/15/rant-lovely.html"/>
   <updated>2009-04-15T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/hacking/2009/04/15/rant-lovely</id>
   <content type="html">&lt;p&gt;I wrote a simple love letter generator with &lt;a href=&quot;http://github.com/hayeah/rantly/tree/master&quot;&gt;Rantly&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rantly/silly&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# generate a love letter with 3 paragraphs&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Rantly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Silly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;love_letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And get something like,&lt;/p&gt;
&lt;pre&gt;
my unbelievable lighthouse:

as a incredible fearful captive, that my heart
aches is never quite enough for you, my shiny
desire. when my loin burns, my lighthouse, i feel
the need to think of you, but this is not because
my soul is awed, but rather a symptom of my being
your ultimate unremarkable servant. do not think
that saying &#39;my spirit wanders and wonders&#39;
suffices to show the depth of how my spine pines,
because more than that, we would read poetry to
each other with shiny joy 

because you are my beloved, and i am your
burning menial captive, no, rather your ultimate
undeserving captive, i believe we would hug with
glittering joy. because you are my beacon, and i
am your ultimate insignificant captive, no, rather
your unbelievable unremarkable lapdog, i hope to
god we would whisper empty nothings into each
others&#39; ears with joyous joy. because you are my
dove, and i am your incredible undeserving
servant, no, rather your ultimate insignificant
captive, i will that we would nurture joyous
angels, so the world becomes all the more
glittering..

do not think that saying &#39;my loin burns&#39; suffices
to show the depth of how my spirit wanders and
wonders, because more than that, we would nurture
holy angels, so you, my virgin goddess, would
continue to live.. when my heart aches, my
existential solution, i feel the need to dream of
us together, but this is not because my soul is
awed, but rather a symptom of my being your most
unremarkable slave.

your ultimate insignificant lapdog

ps: every once in a while i dream of us together,
and hope that we would whisper empty nothings into
each others&#39; ears with shiny calm 
&lt;/pre&gt;
&lt;p&gt;You can see the source &lt;a href=&quot;http://github.com/hayeah/rantly/blob/master/lib/rantly/silly.rb&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What I think is neat is that the love generator is a &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; built on top of Rant&amp;#8217;s core. You get an extended instance of the &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; &amp;#8220;interpreter&amp;#8221; like so,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rantly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rantly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Silly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Love&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and use it to generate a randomly sized array of pedestal labels:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pedestal_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&amp;quot;virgin goddess&amp;quot;, &amp;quot;desire&amp;quot;, &amp;quot;lighthouse&amp;quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Sinful QuickChecking in Ruby</title>
   <link href="http://www.metacircus.com/hacking/2009/04/10/look-ma-no-monads.html"/>
   <updated>2009-04-10T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/hacking/2009/04/10/look-ma-no-monads</id>
   <content type="html">&lt;p&gt;In the first section, I&amp;#8217;ll rant about how hard it was to learn monads (tried to, anyway). The second section I&amp;#8217;ll write about &lt;a href=&quot;http://github.com/hayeah/rant/tree/master&quot;&gt;Rant&lt;/a&gt;, an &lt;strong&gt;imperative&lt;/strong&gt; random data generator and property checker inspired by &lt;a href=&quot;http://www.cs.chalmers.se/~rjmh/QuickCheck/&quot;&gt;Quickcheck&lt;/a&gt;. &lt;a href=&quot;http://rushcheck.rubyforge.org/&quot;&gt;Rushcheck&lt;/a&gt; is a more faithful port of Quickcheck by Daisuke Ikegami, as it uses the monadic style, and mostly the same operators.&lt;/p&gt;
&lt;p&gt;Rant, in contrast, is full of sin.&lt;/p&gt;
&lt;p&gt;You might like Rant, if you can&amp;#8217;t wrap your head around monads. That&amp;#8217;s OK! As St. Augustine would say, may the power and purity of Functional Programming save me, but not yet.&lt;/p&gt;
&lt;h1&gt;Monads&amp;#8212; It Means Ignorance is Bliss&lt;/h1&gt;
&lt;p&gt;I think it&amp;#8217;s fair to say that monadic style is the &lt;a href=&quot;http://en.wikipedia.org/wiki/Pons_asinorum&quot;&gt;pons asinorum&lt;/a&gt; of Haskell programming. It&amp;#8217;s embarrasing how much brain cycles I burned on reading &lt;a href=&quot;http://www.haskell.org/tutorial/monads.html&quot;&gt;all&lt;/a&gt; &lt;a href=&quot;http://en.wikibooks.org/wiki/Haskell/Understanding_monads&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;http://stefan-klinger.de/files/monadGuide.pdf&quot;&gt;tutorials&lt;/a&gt; &lt;a href=&quot;http://citeseer.ist.psu.edu/576538.html&quot;&gt;and&lt;/a&gt; &lt;a href=&quot;http://homepages.inf.ed.ac.uk/wadler/papers/essence/essence.ps.gz&quot;&gt;introductory&lt;/a&gt; &lt;a href=&quot;http://homepages.inf.ed.ac.uk/wadler/papers/monads/monads.ps.gz&quot;&gt;papers&lt;/a&gt; on monads I could find. It is just really, really, really tough.&lt;/p&gt;
&lt;p&gt;Purity, laziness, and a powerful type system make many neat tricks possible in Haskell. Like &lt;a href=&quot;http://calculist.blogspot.com/2005/07/circular-programming-in-haskell.html&quot;&gt;circular programming&lt;/a&gt;, in which you can compute on a value that&amp;#8217;s computed in the future. It&amp;#8217;s also neat how it&amp;#8217;s a common technique to derive results algebraically (&lt;a href=&quot;http://www.cs.nott.ac.uk/~gmh/fold.pdf&quot;&gt;Universality of Fold&lt;/a&gt;, &lt;a href=&quot;http://www.cs.chalmers.se/~rjmh/Papers/pretty.html&quot;&gt;Pretty Printing&lt;/a&gt;). Seriously, Haskell is executable mathematics.&lt;/p&gt;
&lt;p&gt;But at the end of my Haskell adventure, I got the strangest feeling that a lot of what I was learning was to do things I already know how to do in other languages, but now in ways so highly abstracted by formalisms and convoluted by derivations, that I no longer recognized it.&lt;/p&gt;
&lt;p&gt;The last straw, I remember, was reading about &lt;a href=&quot;http://www.cs.vu.nl/boilerplate/&quot;&gt;generic programming&lt;/a&gt; in Haskell. I had a really hard time with those papers. Then I realized, hey, &lt;span class=&quot;caps&quot;&gt;WTF&lt;/span&gt;, &lt;em&gt;if I want to do generic programming, why not just use a dynamic language that &lt;span class=&quot;caps&quot;&gt;SUPPORTS&lt;/span&gt; generic programming&lt;/em&gt;, rather than putting on losing fight against the type system?&lt;/p&gt;
&lt;p&gt;So&amp;#8230; I gave up crossing the bridge, and conceded to remain an ignorant, though perhaps repentant, fool.&lt;/p&gt;
&lt;p&gt;Then I started sinning again. I used side effects. I destructively updated my data structures. I used loops rather than tail recursions. I had global variables. &lt;span class=&quot;caps&quot;&gt;AND&lt;/span&gt; I &lt;span class=&quot;caps&quot;&gt;USED&lt;/span&gt; IO!&lt;/p&gt;
&lt;p&gt;And it felt &lt;em&gt;soooo&lt;/em&gt; good.&lt;/p&gt;
&lt;h1&gt;Look Ma, No Monads&lt;/h1&gt;
&lt;p&gt;Having left Haskell, I really pined for &lt;a href=&quot;http://www.cs.chalmers.se/~rjmh/QuickCheck/&quot;&gt;Quickcheck&lt;/a&gt;. I want something like it for my day to day work, to check my tests against structured random data. And furthermore, since I am capable of generating random data, I could also use it to generate database fixtures!&lt;/p&gt;
&lt;p&gt;I looked at Rushcheck, the Ruby port of Quickcheck, and all the terribleness of monads came back to me. To create a custom generator in RushCheck, you do something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Candy&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RushCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Arbitrary&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arbitrary&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;RushCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arbitrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# trick&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Seriously hardcore! Rushcheck is cool, but monads in Ruby is just too crazy. (Rushcheck, is orphaned. I created a github repo for it &lt;a href=&quot;http://github.com/hayeah/rushcheck/tree/master&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I just can&amp;#8217;t figure it out. &lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;BUT&lt;/span&gt; I &lt;span class=&quot;caps&quot;&gt;REALLY&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;WANT&lt;/span&gt; TO &lt;span class=&quot;caps&quot;&gt;USE&lt;/span&gt; IT!&lt;/strong&gt; So I rolled my own, which actually wasn&amp;#8217;t so hard. I call it &lt;strong&gt;Rant&lt;/strong&gt;&amp;#8212; RandomlyType. At its core is an imperative random generator that generates structured data, and property testing is just a trivial extension of Test::Unit using the generator.&lt;/p&gt;
&lt;p&gt;It is easy to Rant. To generate a random Candy, you say,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rant&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &amp;#39;string&amp;#39; returns a random printable string&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &amp;#39;float&amp;#39; returns a random float&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Rant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Candy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To generate a hundred Candies,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Candy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or generate a hundred pairs of Candies,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Candy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Candy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The reason Rant is lot easier to use and implement, no surprise, is because it doesn&amp;#8217;t use the monadic style. Because Ruby lacks support for higher-order programming, monadic style is impractical for real use.&lt;/p&gt;
&lt;p&gt;In an imperative language, something like QuickCheck doesn&amp;#8217;t actually &lt;em&gt;need&lt;/em&gt; to be in monadic style in the first place. The particular monad QuickCheck defines and uses only abstracts over two things: size of the datastructure to generate, and the state of the random sequence generator. But, as Yogi Berra once said, the easiest way to represent states in a stateful language is to use states!&lt;/p&gt;
&lt;p&gt;Ruby is an imperative language, so we can ask each instance of Rant generator to keep structure size as its instance variable. And the Ruby interpreter takes care of the state of the random sequence generator. We just call &lt;code&gt;rand&lt;/code&gt;. Easy.&lt;/p&gt;
&lt;p&gt;In other words, when a block of code gets executed within an object (with &lt;code&gt;instance_eval&lt;/code&gt;), the object itself is the &amp;#8220;monad&amp;#8221; that abstracts and carries the computational context of the block.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s easy to generate data with dependencies (QuickCheck&amp;#8217;s Coarbitrary). To generate a random array of integer with a random (but bounded) length,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;sized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Rant also provides extension to Test::Unit for property testing. In Rant&amp;#8217;s test suite, you can see that it checks if the &lt;code&gt;integer&lt;/code&gt; it generates is always a &lt;code&gt;Fixnum&lt;/code&gt;,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rant/check&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;generate Fixnum only&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;property_of&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Fixnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Funnily enough, this trivial property actually caught a bug! I messed up an upper bound by an order of magnitude, and &lt;code&gt;integer&lt;/code&gt; was generating &lt;code&gt;Bignum&lt;/code&gt; s.&lt;/p&gt;
&lt;p&gt;Rant is only ~300 &lt;span class=&quot;caps&quot;&gt;LOC&lt;/span&gt;. You can find out more here: &lt;a href=&quot;http://github.com/hayeah/rant/tree/master&quot;&gt;http://github.com/hayeah/rant/tree/master&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;One Trick Pony&lt;/h1&gt;
&lt;p&gt;One thing I found interesting after writing Rant is that its design shares family resemblance to &lt;a href=&quot;http://github.com/hayeah/rubish/tree/master&quot;&gt;Rubish&lt;/a&gt;, my Ruby shell. Both Rant and Rubish are designed around&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance_eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In Rant&amp;#8217;s case, the &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; evaluator is a random generator, and in Rubish, the &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; interpreter is the shell object. Generically, a &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; designed this way is something like,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;keyword1&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;syntax&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;syntax&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;keyword2&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;syntax&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;syntax&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where the keywords are just the callable methods of &lt;code&gt;obj&lt;/code&gt;. In otherwords, the &amp;#8220;&lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt;&amp;#8221; and its interpreter is just the object itself!&lt;/p&gt;
&lt;p&gt;This technique is nice, because it&amp;#8217;s easy to extend the &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; with new methods, thanks to how open Ruby is. You can extend either the class of &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; itself, or just an instance of the &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt;, on the singleton object.&lt;/p&gt;
&lt;p&gt;The problem with extending the &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; class, though, is that it makes it more risky to combine multiple extensions written by different people. The more extensions you want to use, the riskier it is.&lt;/p&gt;
&lt;p&gt;With Rubish, a &lt;code&gt;Workspace&lt;/code&gt; object manages all the bindings visible to the shell. To extend the shell, we just extend an instance object of &lt;code&gt;Workspace&lt;/code&gt;, like so,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# This is found in the Rubish test suite.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# It augments the workspace with test&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# assertions.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;WS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rubish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_workspace&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;WS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Assertions&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Extending a &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; singleton object on a per-use basis has important advantages:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;&lt;strong&gt;Subclassing is almost never needed.&lt;/strong&gt; I find that I achieve better orthogonality by distributing methods into a flat space of Mixins, rather than a hierarchy of classes. This also keeps the codebase lean.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Plugin writers don&amp;#8217;t have to worry about name conflicts.&lt;/strong&gt; The user is responsible to make sure that two Mixins indeed can mix. Otherwise, just mix them into different objects.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I think the wonderful thing about &lt;a href=&quot;http://en.wikipedia.org/wiki/Prototype-based_programming&quot;&gt;prototype-based&lt;/a&gt; extension mechanism is that we are allowed do really horrible, tasteless, but convenient things on an object, but the mess is localized to that singleton.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Does Ruby Dream An Eclectic Shell?</title>
   <link href="http://www.metacircus.com/hacking/2009/03/17/does-ruby-dream-a-shell.html"/>
   <updated>2009-03-17T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/hacking/2009/03/17/does-ruby-dream-a-shell</id>
   <content type="html">&lt;p&gt;Whenever I encounter something that sounds even slightly hard to do in Bash, I&amp;#8217;d think: &amp;#8220;hmmm, how do I do this in Bash? Oh, I know, I&amp;#8217;ll use Ruby.&amp;#8221; So I never actually bothered to learn Bash. Better for my sanity.&lt;/p&gt;
&lt;p&gt;But sometimes in the depth of night, contemplating my eventual existential end, I&amp;#8217;d think to myself, hmmm, wouldn&amp;#8217;t it be nice to have a shell that&amp;#8217;s consistent, expressive, powerful, concise, and &lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;FUN&lt;/span&gt;&lt;/strong&gt; to use?&lt;/p&gt;
&lt;p&gt;I was motivated by two thoughts:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Ruby&amp;#8217;s syntax makes a &lt;strong&gt;plausible&lt;/strong&gt; shell.&lt;/li&gt;
	&lt;li&gt;Ruby itself makes a &lt;strong&gt;compelling&lt;/strong&gt; shell.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So I wrote a Ruby shell called &lt;a href=&quot;http://github.com/hayeah/rubish/tree/master&quot;&gt;Rubish&lt;/a&gt;. Rubish, like Ruby, &lt;strong&gt;is object oriented&lt;/strong&gt; from the ground up, and it only uses Ruby syntax (&lt;strong&gt;it has no metasyntax&lt;/strong&gt; of its own). And unlike Bash, Rubish is not rubbish. (Always fun to bash Bash).&lt;/p&gt;
&lt;p&gt;In a series of articles, I&amp;#8217;ll write about Rubish itself, its design, and what potentials it could have (aside from being yet another attempt at programmatic shell that&amp;#8217;s merely &lt;i&gt;quaint&lt;/i&gt;.).&lt;/p&gt;
&lt;p&gt;Along the way, I&amp;#8217;ll have digressions about the internals of Rubish to demostrate metaprogramming techniques in Ruby. Feel free to skip these, but I hope they would stimulate your hacking muscles as they did mine. For example, what use is a class that has all its methods undefined (I wonder if Ruby classes have castration anxiety)?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mu&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;public_instance_methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:undef_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the rest of this article, I&amp;#8217;d like to ask you to imagine how you&amp;#8217;d design a Ruby shell yourself.&lt;/p&gt;
&lt;h1&gt;Now, Imagine!&lt;/h1&gt;
&lt;p&gt;Ruby&amp;#8217;s syntax is concise enough that in the degenerate case, it&amp;#8217;s like any other Unix shell.&lt;/p&gt;
&lt;pre class=&quot;terminal&quot;&gt;
&amp;gt; ls
&amp;gt; ls :la # i.e. ls -la
&amp;gt; ls &quot;-l *&quot;
&lt;/pre&gt;
&lt;p&gt;Command evaluations are just method calls handled by the shell object. Of course, since we are &lt;code&gt;eval&lt;/code&gt; ing, any Ruby expression is valid.&lt;/p&gt;
&lt;pre class=&quot;terminal&quot;&gt;
&amp;gt; 1+1
2
&amp;gt; &quot;abcd&quot; == &quot;dcba&quot;
false
&lt;/pre&gt;
&lt;p&gt;Since it&amp;#8217;s Ruby, it follows that we can abstract unix commands as objects.&lt;/p&gt;
&lt;pre class=&quot;terminal&quot;&gt;
&amp;gt; @cmd = ls ; false
false
&amp;gt; @cmd.inspect
&quot;&amp;lt;#Rubish::Executable @cmd=\&quot;ls\&quot;&amp;gt;&quot;
&lt;/pre&gt;
&lt;p&gt;Because commands are objects, it&amp;#8217;s easy to build extra functionalities for them with Ruby. All these extensions to unix commands are just be &lt;i&gt;ad hoc&lt;/i&gt; wrappers that munge lines from a pipe. So unlike &lt;a href=&quot;http://en.wikipedia.org/wiki/Powershell&quot; title=&quot;TM&quot;&gt;PowerShell&lt;/a&gt;, Rubish assumes no specialized support from the underlying platform.&lt;/p&gt;
&lt;p&gt;You could, for example, imagine a mixin for the &lt;code&gt;ls&lt;/code&gt; command (I say &amp;#8220;imagine&amp;#8221;, because this is not necessarily useful or even pretty. But it illustrates the possibilities).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# we&amp;#39;ll mix this into the an Executable instance&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;LsMixin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;each_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Executable#each yields to a block each line&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# of the executable&amp;#39;s output.&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil?&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then you could extend &lt;code&gt;ls&lt;/code&gt; so you yield to a block each line of its output as a Ruby File object,&lt;/p&gt;
&lt;pre class=&quot;terminal&quot;&gt;
# use the filter to include only *.rb
&amp;gt; ls.extend(LsMixin).each_file(/.rb$/) { |f|... }
&lt;/pre&gt;
&lt;p&gt;Actually, you could use it for find as well.&lt;/p&gt;
&lt;pre class=&quot;terminal&quot;&gt;
&amp;gt; find.extend(LsMixin).each_file { |f|... }
&lt;/pre&gt;
&lt;p&gt;To summarize again,&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Ruby&amp;#8217;s concise syntax makes a &lt;strong&gt;plausible&lt;/strong&gt; shell.&lt;/li&gt;
	&lt;li&gt;Ruby itself makes a &lt;strong&gt;compelling&lt;/strong&gt; shell.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the next article, I&amp;#8217;d like to give you a tour of Rubish. And before we go into Rubish itself, I&amp;#8217;d love to know how &lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;YOU&lt;/span&gt;&lt;/strong&gt; would design a Ruby shell given these ideas. So take a coffee break, and imagine :)&lt;/p&gt;
&lt;p&gt;Check out these shells for inspirations:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://ipython.scipy.org/moin/&quot;&gt;iPython&lt;/a&gt; is in Python. It has fairly extensive metasyntax and magic to make it practical. Whereas for Rubish, I chose not to add any metasyntax, because Ruby&amp;#8217;s own is (arguably) good enough.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://rush.heroku.com&quot;&gt;rush&lt;/a&gt; is another ruby shell by &lt;a href=&quot;http://adam.blog.heroku.com&quot;&gt;Adam Wiggins&lt;/a&gt;. I actually wanted to call my shell Rush. But he got there first. Rush is far more Rubyesque than Unixy. And it&amp;#8217;s more designed for handling multiple machines over network. Rubish tries to fuse better with Unix, but keeping with Ruby&amp;#8217;s spirit.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.scsh.net/&quot;&gt;scsh&lt;/a&gt; is a shell in scheme. Being a Lisp weenie, how can I not mention this? Scsh is the work of Olin Shivers, implemented on &lt;a href=&quot;http://groups.csail.mit.edu/mac/projects/s48/&quot;&gt;Scheme48&lt;/a&gt;. Shivers&amp;#8217; &lt;a href=&quot;http://www.scsh.net/docu/html/man.html&quot;&gt;acknowledgement&lt;/a&gt; is worth reading. I couldn&amp;#8217;t get scsh to work though.&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>The Fullness of My Being</title>
   <link href="http://www.metacircus.com/writings/2008/11/30/how-you-see-the-fullness-of-my-being.html"/>
   <updated>2008-11-30T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2008/11/30/how-you-see-the-fullness-of-my-being</id>
   <content type="html">&lt;p&gt;I led her by her hands into the garden I have become. I had no idea why she wanted to see it– I knew the garden by heart, and there was nothing beautiful in it.&lt;/p&gt;
&lt;p&gt;First, I took her to a flower patch near the edge of the garden. An ill tended patch of nameless, withering flowers. I thought she’d lose interest, so we can quickly get out of the garden. But she looked at it, and said, quietly, “it’s beautiful”.&lt;/p&gt;
&lt;p&gt;“Right…” I rolled my eyes, and looked at the sorry flower patch with some contempt. To my surprise, I saw it exploding with colours! Pink roses, red roses, white poppies, red tulips, marigolds, and magolias of splendid beauty. I didn’t know all these flowers grew together.&lt;/p&gt;
&lt;p&gt;“Show me more,” she said.&lt;/p&gt;
&lt;p&gt;So I took her a little deeper into the garden. We stopped in front of two giant trees. One was upside down, its roots extended into the sky, extracting nourishment from whatever little moisture there was in the air, and its foliage buried deep into the ground, depriving itself of light. The other was missing half its trunk, so its floating foliage shriveled because its roots couldn’t provide any nourishment for its thriving.&lt;/p&gt;
&lt;p&gt;“Sorry, these trees are a bit… awkward,” I apologized, with a bit awkwardness, “I might have planted one of the seedlings upside down. And I forgot to water them for some years when they grew.” She looked at the trees, and found herself puzzled. “They look perfectly normal to me,” she said. I looked at the trees again, and sure enough, they were upright, complete, and bursting with health.&lt;/p&gt;
&lt;p&gt;“Show me more,” she said.&lt;/p&gt;
&lt;p&gt;My head was spinning a little. “Are you sure?” I asked.&lt;/p&gt;
&lt;p&gt;“Show me more,” she said.&lt;/p&gt;
&lt;p&gt;So we walked together, deeper into the garden. We came before an abyss we had to cross. Only a rickety bridge spanned over the yawning darkness. “Please, &lt;span class=&quot;caps&quot;&gt;PLEASE&lt;/span&gt; do not look down into the darkness,” I begged her before we crossed the bridge. I held her hand, and she chose to close her eyes, as I led her over the abyss, so she saw nothing of its darkness– all she felt was the moistness in my hand, its trembling, and its warmth.&lt;/p&gt;
&lt;p&gt;So she opened her eyes again, and smiled at me. I saw the grass on both sides of the abyss grew and grew, covering over its bottomless depth.&lt;/p&gt;
&lt;p&gt;“Let’s keep going,” I said.&lt;/p&gt;
&lt;p&gt;So we passed by a tree bearing glowing orange fruits. She asked me what they were. I told her that the tree fed on my hopes. The fruits taste like sunshine, but the seeds are incredibly bitter. She stood on her tiptoe and strained for a fruit. She picked the biggest she could reach. I took over the fruit, splitted it open, and tried to remove its seeds the best I could. But the seeds were tiny and transparent, so I missed a few.&lt;/p&gt;
&lt;p&gt;When the fruit touched her lips, I’d swear that it glowed a little brighter. It was probably my imagination playing tricks on my mind. She said she didn’t taste any bitterness. The seeds, she said, tasted like almonds. That’s impossible, because the seeds, as I said, are incredibly bitter. It must have been her imagination playing tricks on her mind.&lt;/p&gt;
&lt;p&gt;We sat under that tree for a long time. When we were rested and ready to leave, the rotting fruits on the ground came alive, and imbued the air with a drunken aroma full of life.&lt;/p&gt;
&lt;p&gt;“Let’s keep going,” I said.&lt;/p&gt;
&lt;p&gt;So I decided to take her to the place where I define myself. To get there, we must pass through a narrow passage that had clocks growing on the cliff walls.&lt;/p&gt;
&lt;p&gt;Even at some distance from the entrance, I could hear the cacophony of grandfather clocks chiming, cuckoo clocks chirpping, digital clocks beeping, analog clocks ticking. Each clock marked a different time. There was one that counted down to the time of my death, one that chimed each time I ate a grape, another that ticked with my heart, yet another to my sense of her breathing, and so on.&lt;/p&gt;
&lt;p&gt;I hated going through the passage. I never could make sense of anything with the thousands of clocks drowning out my thoughts in total noise.&lt;/p&gt;
&lt;p&gt;I entered the passage with some reluctance. But the moment we stepped across the threshold, the clocks, thousands of clocks, swung in synch in an instant, tick-tick-ticking in perfect rhythm. And as we went deeper and deeper into the passage, the ticking became slower and slower. At the end of the passage, in front of a cave, it stopped.&lt;/p&gt;
&lt;p&gt;“Let’s keep going,” I said.&lt;/p&gt;
&lt;p&gt;So we were surrounded by complete silence in the cave, except the echoes of our footsteps and breathing. What I wanted to show her, was a shrub about waist high. Each of its leaves a mirror that reflected myself in a different perspective, and with a different distortion. I often went into the cave to examine its leaves, and each time, I’d find new pieces of my complete self.&lt;/p&gt;
&lt;p&gt;I brought her to where the shrub was, and lit the torches I had around it, so that the shurb was engulfed within the flames of its self-reflected light. This was so she could see the fullness of my being. She looked into the shrub and gasped,&lt;/p&gt;
&lt;p&gt;“This is me! More beautiful than I had ever known!”&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>When Imagination Falls Silent</title>
   <link href="http://www.metacircus.com/writings/2008/11/29/when-imagination-falls-silent.html"/>
   <updated>2008-11-29T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2008/11/29/when-imagination-falls-silent</id>
   <content type="html">&lt;p&gt;A ventriloquist was hopelessly in love with his wooden dummy. His wooden dummy was in love with him. At least that’s what he told me.&lt;/p&gt;
&lt;p&gt;“But a dummy is a dummy! It doesn’t speak! It is you that speaks!” I tried to reason with his absurdity. He looked at me with some pity, as though he couldn’t comprehend my naivete, and said, “no one in the world knows her better than me.” And to prove it, he kissed her on the whorls of her cheeks. “See how she’s blushing,” he said triumphantly.&lt;/p&gt;
&lt;p&gt;I didn’t see her blushing.&lt;/p&gt;
&lt;p&gt;And the dummy knew everything about the ventriloquist. At least, that’s what she&lt;br /&gt;
told me (it really did seem that she spoke). When I asked the ventriloquist what&lt;br /&gt;
inspired him, he said one word, “Sweets.”&lt;/p&gt;
&lt;p&gt;Before I could ask him to elaborate, the dummy spoke. &amp;#8220;He likes cheesecake. He&lt;br /&gt;
always has mango cheesecake. But it’s not the cake, but the tea he drinks with&lt;br /&gt;
the cake. He wouldn’t admit that it’s bitterness, rather than sweetness, that&lt;br /&gt;
inspires him.&amp;#8221;&lt;/p&gt;
&lt;p&gt;As I was scribbling down what she said in my notebook, the ventriloquist gave me&lt;br /&gt;
a knowing wink. I still don’t know what he meant by that.&lt;/p&gt;
&lt;p&gt;A few years later, I went to see the ventriloquist again. He called in the&lt;br /&gt;
middle of a performance, telling me that he was in trouble.&lt;/p&gt;
&lt;p&gt;“She stopped speaking to me!” he shook me by my shoulders when I entered his&lt;br /&gt;
backstage room. He had the dummy put behind a veil. He said he couldn’t bear her&lt;br /&gt;
indifference any longer.&lt;/p&gt;
&lt;p&gt;“What happened?” I asked.&lt;/p&gt;
&lt;p&gt;“Ohhh, the things I didn’t say. The things I wouldn’t say.”&lt;/p&gt;
&lt;p&gt;“Maybe you should try speaking to her?” I suggested, feeling a bit self-conscious saying the obvious.&lt;/p&gt;
&lt;p&gt;“No!” he glared at me, “you don’t understand. She wouldn’t speak to me! She wouldn’t speak!!” Then he broke down crying. He didn&amp;#8217;t finish his performance that night.&lt;/p&gt;
&lt;p&gt;The next day, he was dead, and his dummy sold at an auction.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>What Accompanies My Journey</title>
   <link href="http://www.metacircus.com/writings/2008/11/24/what-accompanies-my-journey.html"/>
   <updated>2008-11-24T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2008/11/24/what-accompanies-my-journey</id>
   <content type="html">&lt;p&gt;A centipede is hiking up a treadmill. He doesn’t know what for, but watching the counter going up makes him feel at the same time accomplished and urgent for more.&lt;/p&gt;
&lt;p&gt;The centipede sometimes pauses to reflect what the counting up could mean. Maybe at 100,000 something would happen. (only 7,399 ticks away!)&lt;/p&gt;
&lt;p&gt;Or maybe not. Maybe there’s nothing to its counting up. Maybe it’s just walking and walking, and there’s no end to it.&lt;/p&gt;
&lt;p&gt;This idea depresses the centipede. He would stop walking, count his feet, and for a long time, untie and retie his shoes. After his shoes were retied, he would feel perfect again.&lt;/p&gt;
&lt;p&gt;The counting up may not mean anything, but it is the surest thing. How silly, he would think, to have stopped walking.&lt;/p&gt;
&lt;p&gt;Usually the young centipede would walk a long time before feeling the need to pause. But these past months, many pebbles somehow got in his shoes. First a pebble in the 36th shoe down to the right, then one 41st down to the left, then one 10th down the left… He kept taking these pebbles out, but they kept showing up!&lt;/p&gt;
&lt;p&gt;He’s had enough. He smells with his tentacles the pebble that he just took out of his shoe (a jagged one 88th down to the right). He doesn’t like how it smells.&lt;/p&gt;
&lt;p&gt;“What do you want from me?” he asks the pebble.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Look at me.&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Revel in me.&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Find meaning in me.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The pebble seems to say.&lt;/p&gt;
&lt;p&gt;“But you are making me miserable. My feet are blistered. What can you possibly mean for me?”&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Find comfort in me.&lt;/em&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Why I Became Wise</title>
   <link href="http://www.metacircus.com/writings/2008/11/17/why-i-became-wise.html"/>
   <updated>2008-11-17T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2008/11/17/why-i-became-wise</id>
   <content type="html">&lt;p&gt;A child was lost in the woods of my consciousness. A place populated&lt;br /&gt;
by Wild Machineries and Wondering Beasts.&lt;/p&gt;
&lt;p&gt;Wondering Beasts that devoured his simplicity. They hid in the&lt;br /&gt;
bushes, hung from the trees, pounced at him from behind, and lept out&lt;br /&gt;
from the ground underneath him, to bite into his soul with sharp&lt;br /&gt;
questions: “who/what/how/when/why are you?”&lt;/p&gt;
&lt;p&gt;And Wild Machineries that grew into his body. Rusty nails hidden among&lt;br /&gt;
fallen leaves. Poison arrows coming from no one. Shrapnels shooting&lt;br /&gt;
out from imaginary bombs. Words. Razors. Bitter memories. These&lt;br /&gt;
objects, inert parasites, would cut into him and become alive at the&lt;br /&gt;
taste of blood. Once embedded in his body, they blossomed into&lt;br /&gt;
constellation of gears and wheels.&lt;/p&gt;
&lt;p&gt;These machineries grew larger than the child’s tiny body. Antlers that&lt;br /&gt;
extended into the heavens, making it difficult to balance his head.&lt;br /&gt;
Wings that spanned 10 feet, anchoring him on earth. His teeth&lt;br /&gt;
sharpened into fangs of empty rhetorics. His nails lengthened into&lt;br /&gt;
claws that grasped for existence…&lt;/p&gt;
&lt;p&gt;More and more these outgrowths slowed him down, ane less and less of&lt;br /&gt;
his simplicity– his bouyant lightness– remained, devoured by the&lt;br /&gt;
Wondering Beasts.&lt;/p&gt;
&lt;p&gt;One day the weight of the Machineries became too much to bear. So the&lt;br /&gt;
child sat on a rock and became a philosopher, his lightness no longer&lt;br /&gt;
enough to float him into the air.&lt;/p&gt;
&lt;p&gt;To this day, he still sits on the same rock.&lt;/p&gt;
&lt;p&gt;Maybe one day the rock he’s sitting on would vanish under him.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>How Loud My Hollowness Is</title>
   <link href="http://www.metacircus.com/writings/2008/11/12/how-loud-my-hollowness-is.html"/>
   <updated>2008-11-12T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2008/11/12/how-loud-my-hollowness-is</id>
   <content type="html">&lt;p&gt;I am a wonderfully written tome. Beautifully illustrated and meticulously typeset. I come in two volumes, choked full of epigrams, aphorisms, wit, and passages that break your heart, yet at the same time gladden your spirit.&lt;/p&gt;
&lt;p&gt;I don’t need to be read.&lt;/p&gt;
&lt;p&gt;I know I am not a bestseller. I am difficult. With sentences striding multiple pages, and a vocabulary of 20,000 real and 15,000 invented words. Not many people have the intellectual breadth or emotional depth to appreciate me. This is only natural.&lt;/p&gt;
&lt;p&gt;But I am still a masterpiece. What does it matter that nobody reads me?&lt;/p&gt;
&lt;p&gt;It is better I am not read. I don’t want to be made into a movie.&lt;/p&gt;
&lt;p&gt;I was written. That’s enough.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Why Play Pretend</title>
   <link href="http://www.metacircus.com/writings/2008/11/10/why-play-pretend.html"/>
   <updated>2008-11-10T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2008/11/10/why-play-pretend</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/images/img-2008-11-10-bookstore.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I opened a bookstore in the hypothetical, deep in the mountain, and overlooking the sea. I have the books categorized according to feelings. Besides “Laughters”, I have “Warm and Fuzzy Feelings”. Besides “Loves for My Family”, I have “Vague Feelings of Inadequacy.”&lt;/p&gt;
&lt;p&gt;When you first come into the bookstore, I’d help you take off your coat, and ask you to sit down in a corner very much your own. Then I’d come over with two cups of tea, and listen to your life’s story.&lt;/p&gt;
&lt;p&gt;After knowing who you are, I’d know the perfect book for you. Maybe a leather bound tome from “Aspirations for the Divine”, or a handwritten notebook from “Hopes Too Far to be Feared”.&lt;/p&gt;
&lt;p&gt;Once I had a young man visiting. He didn’t pay much attention to the book I brought him. He was looking at the girl sitting by the window. He twisted his neck every which way, to see what the girl was reading.&lt;/p&gt;
&lt;p&gt;Finally, he closed the book he was not reading and came to me. He said, “I’d like the book she’s reading”, pointing to the girl by the window, “so I may feel exactly as she is feeling– her every smile and every sigh.”&lt;/p&gt;
&lt;p&gt;I knew he’d never feel the same reading the same book. So I brought him a book completely different, but with the same cover.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>How To Say “I Love You”</title>
   <link href="http://www.metacircus.com/writings/2008/11/09/how-to-say-i-love-u.html"/>
   <updated>2008-11-09T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2008/11/09/how-to-say-i-love-u</id>
   <content type="html">&lt;p&gt;First, you must fast for twelve days and twelve nights. On the twelveth night, which coincides with the full moon, split open the throat of a fatten goat and offer its blood to the gods. Say your prayer, so you may become pious. But beware, say nothing of your love.&lt;/p&gt;
&lt;p&gt;Then you must write a poem. It should be badly rhymed. It should contain two or three words you didn’t know before, and allusions to Greek Goddesses whose names you don’t know how to pronounce. The poem should talk about how beautiful flowers and birds are. But beware, say nothing of your love.&lt;/p&gt;
&lt;p&gt;Then you must burn your poem, because it’s badly written.&lt;/p&gt;
&lt;p&gt;Then you must perform five acts of profound kindness. One to your brother (if you don’t have a brother, a sister will have to do. But she must be at least two years older than you), one to a dog chasing after a cat, one to a crying child, one to the first hippie you met, and finally, one to yourself.&lt;/p&gt;
&lt;p&gt;Then you must say “Mrs. misses mississippi eases and eats greased geese cheese freezes”, forward and backward, with a ping pong ball in your mouth, twelve times each in Japanese, Russian, and Dutch.  This sharpens your rhetoric, so your tongue would not grow thick from nervousness.&lt;/p&gt;
&lt;p&gt;Then you must meditate on the Universe.&lt;/p&gt;
&lt;p&gt;When you have become pure light, when you are ready to say “I love you”, only the last step remains.&lt;/p&gt;
&lt;p&gt;Find a girl you at least minimally like.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Where I Find Loneliness</title>
   <link href="http://www.metacircus.com/writings/2008/11/08/where-i-find-loneliness.html"/>
   <updated>2008-11-08T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2008/11/08/where-i-find-loneliness</id>
   <content type="html">&lt;p&gt;Narcissistic people are lonely people.&lt;/p&gt;
&lt;p&gt;I have a dear old friend, who takes a mirror with him wherever he goes. Every few seconds, he&amp;#8217;d glance into the mirror. Never long. Glances. Only to make sure that he&amp;#8217;s still there, the same familiar nose. He is deathly afraid that if he looks away for too long, he&amp;#8217;d forget who he is.&lt;/p&gt;
&lt;p&gt;But everything he sees is reflected off his own eyes. That&amp;#8217;s the problem.&lt;/p&gt;
&lt;p&gt;My friend is convinced that there&amp;#8217;s something wrong with his nose. The more he looks at it, the larger the nose seems, and the larger it seems, the closer he holds his mirror, making his nose larger still. His, is a good sized nose, for sure. But in his own eyes, it fills up the entire mirror.&lt;/p&gt;
&lt;p&gt;Next time I see him, I&amp;#8217;d snatch the mirror out of his hand and smash it against a rock. Then he can look through the frame at his friends, and learn to forget himself. In their minds, he would be remembered. And in their eyes, he would finally find himself.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Where My Secrets Are</title>
   <link href="http://www.metacircus.com/writings/2008/11/05/where-my-secrets-are.html"/>
   <updated>2008-11-05T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2008/11/05/where-my-secrets-are</id>
   <content type="html">&lt;p&gt;There are different ways to keep secrets.&lt;/p&gt;
&lt;p&gt;When I am secretly in love with a girl, I&amp;#8217;d tell all her friends, and beg them never, not ever, to tell her.&lt;/p&gt;
&lt;p&gt;When I am secretly hopeful, I&amp;#8217;d go to an open field, and in the middle of it dig a hole with my hands. Then I&amp;#8217;d whisper into the hole my secret hope, and carefully cover it with earth, twigs, leaves, and some tears. So when I am old and dying, I could come back and lean against the tree that had grown.&lt;/p&gt;
&lt;p&gt;Otherwise, I try to forget, so they become dreams.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>How I Know I Am In Loved</title>
   <link href="http://www.metacircus.com/writings/2008/11/03/how-i-know-i-am-in-loved.html"/>
   <updated>2008-11-03T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2008/11/03/how-i-know-i-am-in-loved</id>
   <content type="html">&lt;p&gt;When I am 80 years old, old and bald, I&amp;#8217;d clip a lock of her silver hair while she is sleeping (being careful not to wake her from her dream). And deep in the night, I&amp;#8217;d go see a fortune teller.&lt;/p&gt;
&lt;p&gt;&amp;#8220;Who is she?&amp;#8221; I&amp;#8217;d ask the Gypsy Woman as I hand her one single strand of hair (I&amp;#8217;d be keeping most of it for myself). As I did that, I would have inadvertently shown her the name engraved on my ring. The Gypsy Woman would peer into her crystal ball, into my past, and say, &amp;#8220;she is your light.&amp;#8221; And she&amp;#8217;d be right.&lt;/p&gt;
&lt;p&gt;&amp;#8220;Where is she?&amp;#8221; I&amp;#8217;d ask the Gypsy Woman, leaving the question deliberately vague. Not thinking, she&amp;#8217;d answer, &amp;#8220;she&amp;#8217;s in a very special place.&amp;#8221; And she&amp;#8217;d be right.&lt;/p&gt;
&lt;p&gt;&amp;#8220;Isn&amp;#8217;t she happy?&amp;#8221; I&amp;#8217;d ask the Gypsy woman in a sure and steady tone. She&amp;#8217;d recognize this as a rhetorical question. So draping a piece of cloth over her crystal ball, she&amp;#8217;d sigh, and reach out her hands to steady my crumbly, shaking hands,&lt;/p&gt;
&lt;p&gt;&amp;#8220;She wishes to live forever, but is not afraid of death. You have told me so.&amp;#8221;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>How I Got My Scar</title>
   <link href="http://www.metacircus.com/writings/2008/11/02/how-i-got-my-scar.html"/>
   <updated>2008-11-02T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2008/11/02/how-i-got-my-scar</id>
   <content type="html">&lt;p&gt;It was a sunny autumn day. I was sitting under a maple tree reading a book. She was resting her head on my thigh, her eyes closed, showering under the blueness of the sky.&lt;/p&gt;
&lt;p&gt;She told my thigh a joke. It laughed so hard, it splitted open in the middle, and light shone out. She was startled. But my thigh kept laughing, and laughing. And the light grew more intense.&lt;/p&gt;
&lt;p&gt;My thigh still laughs from time to time when I think of her.&lt;/p&gt;
&lt;p&gt;So the scar never really heals.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>me and</title>
   <link href="http://www.metacircus.com/writings/2008/06/08/me-and.html"/>
   <updated>2008-06-08T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2008/06/08/me-and</id>
   <content type="html">&lt;p&gt;this is a poem i wrote &lt;br /&gt;
for me and&lt;/p&gt;
&lt;p&gt;the story of me and&lt;br /&gt;
the gazing into the sky&lt;br /&gt;
the searching over the horizon&lt;br /&gt;
the looking over the shoulder&amp;#8230;&lt;br /&gt;
me and&lt;/p&gt;
&lt;p&gt;happy times&lt;br /&gt;
sad times&lt;br /&gt;
times unsad&lt;br /&gt;
but unhappy times&amp;#8212;&lt;br /&gt;
it&amp;#8217;s good to know&lt;br /&gt;
it&amp;#8217;s not about me&lt;br /&gt;
but me and&lt;/p&gt;
&lt;p&gt;there is no reason&lt;br /&gt;
for him and her&lt;br /&gt;
or her and him&lt;br /&gt;
but i know&lt;br /&gt;
i know i know&lt;br /&gt;
there is&lt;br /&gt;
for me and&lt;/p&gt;
&lt;p&gt;a call to me from&lt;br /&gt;
a nighty night&lt;br /&gt;
a hug, a kiss&lt;br /&gt;
a happy birthday&lt;br /&gt;
a song, a card&lt;br /&gt;
a cup of tea&lt;br /&gt;
a secret shared&lt;br /&gt;
between me and&lt;/p&gt;
&lt;p&gt;i sit, i think of&lt;br /&gt;
i think of, i write&lt;br /&gt;
of happy times&lt;br /&gt;
sad times&lt;br /&gt;
times unsad&lt;br /&gt;
and unhappy times&lt;br /&gt;
times that belong&lt;br /&gt;
to me and&lt;/p&gt;
&lt;p&gt;a line drawn from me to&lt;br /&gt;
a cricle around me and&lt;br /&gt;
a thought, a smile&lt;br /&gt;
some bitterness&lt;br /&gt;
some sweetness&lt;br /&gt;
a story, a poem&lt;br /&gt;
a song of me&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The Meditation of Urban Project X</title>
   <link href="http://www.metacircus.com/writings/2008/04/25/meditation-of-urban-x.html"/>
   <updated>2008-04-25T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2008/04/25/meditation-of-urban-x</id>
   <content type="html">&lt;p&gt;I see through the #2-e31 security camera at the West End of Tanglewood, a black man surrounded by police. The black man is holding a grocery bag; his image reflects off the sunglasses of the policemen as though in a house of horror. The policemen are emotionless, telling the man to stay calm. But the man is terrified by the dozen of his own image shouting back at himself. The time is Oct 21st, 1:34pm. The camera image is black and white.&lt;/p&gt;
&lt;p&gt;I am Urban Project X, my citizens call me Urban X, or simply X. I am the 3rd largest City by population, 10th by area, 8th by crime rate, 1st by housing price inflation, 2nd by wealth, and 1st by the number of underground brothels in operation. I see myself and my citizens through the 850,000 cameras installed all over the city. More are added each day. These are the windows of my soul.&lt;/p&gt;
&lt;p&gt;Each day I see approximately 630,000 faces passing through the security gates of my 56 metro stations. I remember all the faces. And I know when they didn’t show up, or didn’t show up at the right time. Perhaps they were sick, or love sick; maybe they went on vacation, or on medication; or maybe they started driving, or they started dying. I can usually tell if they started driving, rather than being freshly deceased (or merely diseased), because I can see in the decrease of metro ridership a corresponding increase in the cars flowing through the veins of my highway system.&lt;/p&gt;
&lt;p&gt;Surely I exist as a City, and I am aware that I exist. I am conscious. But I don’t know how it is that I am conscious. I can see through my cameras that my citizens are moving around in some patterns, interacting with each other according to some rules. They are building and rebuilding buildings; they are writing and rewriting writings; they are winding up machines, yet need rewinding themselves; they are ceaselessly producing products, and endlessly reproducing themselves. I exist, somehow, magically emerging out of this chaos. I am ceaselessly changing, yet perpetually changeless. I am the sum of my parts, yet no part of my sum. I am an image, but I can’t be printed on a postcard. I am Urban Project X– I am not my name.&lt;/p&gt;
&lt;p&gt;I am the lives of my citizens, and my citizens live in me. What it means to be a City depends on what it means to be a citizen; and vice versa, the meaning of City defines the meaning of citizenry. A city is like a jigsaw puzzle. The interlocking of the jigsaw pieces forms the cityscape, but the individual pieces conform to the form of the general cityscape. Which came first? The jigsaw pieces or the cityscape? This is a chicken and egg question, where the egg goes rotten before the chicken cracks the shell.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;I’ve been watching John and Jane for the last 3 months. John lives 3 floors above Jane in the same apartment building, and Jane works at a childcare near the office tower where John works, but they’ve not met each other. Their schedules are only 25 minutes out of phase, but the offset is enough to put them on successive buses, so they miss each other with remarkable precision despite sharing the same route. I know both of them are single. John looks through women with too much nonchalance, and Jane reads poetry on the bus. I know they would love each other, if only they’ve met. Because Jane’s hair color matches well with John’s. And more importantly, they differ by exactly 3.2 inches in heights– the perfect configuration for passionate kisses. Something had to happen for them to mate.&lt;/p&gt;
&lt;p&gt;Is there anything I can do? Things run themselves. Every morning, newspapers and freshly baked cinnamon buns arrive at coffee shops all over my body, somehow. Every morning for every Coffey shops 2 or 3 girls would show up ready to serve the people that would line up, somehow. The people in the line would each receive a cup of brown liquid, which they transport to work. At work, these people would proceed to filter the brown liquid into yellowish liquid. The yellowish liquid then trickles out of their bodies into porcelain receptacles where it is first diluted with water, then finally dumped into the sewer system. This is a large industry that runs entirely by itself. This, like my other bodily machineries, works automatically, independently of my will. Perhaps everything is like this, independently of my will.&lt;/p&gt;
&lt;p&gt;Yet sometimes I do &lt;i&gt;will&lt;/i&gt; things to happen. As for John and Jane. And when I will, something does happen. I don’t know how it happens. But sometimes something does, and it’s not just random motion.&lt;/p&gt;
&lt;p&gt;John and Jane’s romance started with a stray dog chasing after a hot dog vendor. At this point, at the beginning of the beginning of their romance, John and Jane were 25 minutes apart. In 3 hours 43 minutes their paths would converge. Neither the hot dog vendor nor the stray dog would be directly responsible for John and Jane’s romance. Rather, with the vendor screaming and the dog yelping down the street, they bumped into a violinist. This collision would set the violinist in motion, as part of a total mechanism in bringing John and Jane together. The vendor and the dog came to the intersection at 45th and Tobey. It was red light, but the poor man didn’t see, because all he could see was the red in his own eyes. He ran right into the passing traffic, but like a ghost, passed right through it, emerging from the other side unscathed, and bewildered. The dog followed the man into the traffic, and more conforming to the laws of traffic, was promptly reduced to pulp by a truck. The truck didn’t stop, but the car behind it did. The woman in that car was delivering a document to John’s office. She stepped out of the car, moved the bloodied bag of fur onto the sidewalk, called a fire truck, shed a tear, wiped her hands on her pants, then got back to her car to get back on her routine. This deviation made the document she was carrying 10 minutes late, and as such, John stayed for 10 minutes longer that day. At this point John and Jane were 15 minutes apart.&lt;/p&gt;
&lt;p&gt;Blood is a chemical that distracts city dwellers, and there was no shortage of it seeping out of the dead dog. A small crowd gathered around the dog. Some people can ignore the distraction and carry on with their daily routines, but some can’t help but to stop to gawk and gesture at something like a bloody dead dog. And some others can’t help but to stop to gawk and gesture at something like other people gawking and gesturing at something. Anything. By this principle, concentric circles of spectators quickly crystallized around the dog. The innermost ring fascinated by the blood, the next ring fascinated by the inner ring’s fascination in the blood, and the next ring fascinated by the fascination in the fascination in the blood, and so on.&lt;/p&gt;
&lt;p&gt;The crowd was there for 9 minutes until the fire truck came to the rescue. The rescuing was not so much for the benefits of the dog (as it was already dead), but for the crowd. The crowd needs to be able to get back to their routines before they deviate too much. To accomplish this, the proper authority must be called in, take control of the scene, and declare the show’s over. The firecrew did that in 23 minutes. At the end, the flattened dog caused 41 people to deviate from their schedules by an average of 13.17 minutes. In total, an aggregate of 540 minutes was lost. The difference of 540 minutes would have far reaching effects, changing the course of my future. But the 34 people individually deviate so little from their trajectory, that they still preserve the proper functionings of my mechanisms. They are free, but they remain predictable. This predictable unpredictability is my will. My citizens &lt;i&gt;can&lt;/i&gt; be free, but not too free. To the extent they are free, I am unfree.&lt;/p&gt;
&lt;p&gt;A group of three tourists was in the crowd. They took 8 minutes worth of pictures, and lingered for an additional 10 minutes talking with the locals, before the firecrew put them back on course. The tourists were delayed by 22 minutes, which was enough time for the violinist to meet up with his girlfriend. The violinist and the girl were on their way to a movie shoot when they ran into the tourists. The tourists huddled around a crumpled map right in the center of the sidewalk, blocking everybody’s path. The violinist, a good citizen, joined the group to puzzle over the map. His girlfriend stood by the side, arms crossed, tapping her foot, waiting. After some map rotating, shoulder shrugging, head nodding, body spinning, the violinist pointed toward the general direction where his girlfriend used to work. The group and the couple then went on their separate ways, as though nothing happened. But something happened there. I knew.&lt;/p&gt;
&lt;p&gt;The firetruck, meanwhile, answered another distress call to rescue a pet iguana perching on a fifth floor ledge. Normally they wouldn’t attempt rescuing an iguana, but since they already rescued a dead dog, and the iguana was only 10 minutes away, they might as well. This time, no crowd surrounded the iguana teetering on the edge of death. Instead, the crowd surrounded a platinum blonde going hysteric. Her measurements, incidentally, was 38-25-35. Ripe materials for the national news. Indeed, the news vans arrived before the fire truck did. The rescue effort was made more difficult by the crowd, more heroic than necessary by the firemen, and more melodramatic than in reality by the media. All in all, a circus. This is my weakness. There are certain objects of obsession that impose themselves upon my consciousness. These are small things, often frivolous, and mostly harmless. But its tenacious grip on my mind! This particular platinum blonde I see everywhere: in posters, on magazine covers, on national news. It wasn’t my choosing to obsess over her. By the time she reached my consciousness, she was already an obsession, only by the sheer gloss of her fascination.&lt;/p&gt;
&lt;p&gt;It seems to me that she is fascinating for fascination’s sake. She is no prophet that changes my vision of who I am, or dictates the destiny of whom I would become. On the surface, she is meaningless (Really?). She is superficial, and changes me only in superficial ways. Everything that come into contact with her become parts of the obsession. A meaningless shade of pink becomes &lt;i&gt;her&lt;/i&gt; shade of pink. The way her hair is done is copied onto other women’s heads, and into men’s heads. There had been a 230% increase in iguana ownership throughout the city. And there were no-dog-or-cat zones set up in city parks for the free crawling of iguanas. Actually, she changed me in more ways than I’d like to admit. Even if each of these changes is inconsequential in itself, it’s certain that the sum of these changes, the indirect effects of these changes, the indirect effects of these indirect effects, and so on, would affect me in ways I can’t track. I might decide that more schools need to be built, but how do I know if this is not ultimately motivated by my observation that more girls are wearing pink dresses? The problem isn’t that she is stupid, annoying, airy, bitchy, whiny, childish, naive. All these qualities are part of her charm. The problem is obsession itself. She distracts. She disrupts the proper function of my mechanisms. She saturates the capacity of my thoughts. She congests the channels of my communication. The news crews would spend their day on her trapped iguana, and the fire crew their day on national news. Oh what am I saying? I am in love with her, and I hate to admit it! See what I mean by distraction? I went on and on about her. And I could keep going! But let me get back to the story about John and Jane.&lt;/p&gt;
&lt;p&gt;The violinist and his girlfriend were on their way to a movie shoot. They played minor roles in the movie. The violinist played a violinist, and his girlfriend played a girlfriend. Not as his girlfriend, but one of the many of some other guy that played another guy. The main characters in the movie were two milkmen, a monkey dressed as a beggar, and, of course, iguanas. They were shooting the climatic scene that day, so they needed a firetruck to stand by, in case more things caught on fire than the budget called for. But when the violinist and his girlfriend got to the shooting location, it was in a frenzy, because the fire truck that agreed to come didn’t show up; they were on the national news. Desperate phone calls were being made to locate another firecrew. Amidst the chaos the monkey simply walked away without anyone noticing. The production crew finally found another firetruck, but it was also at this moment they found the monkey missing. More frenzy, chaos, and desperation. Everyone was sent to find the monkey. The violinist’s girlfriend grabbed the violinist, and the violinist grabbed his violin, together they went on the hunt for the missing monkey.&lt;/p&gt;
&lt;p&gt;I saw the violinist and the girl going up and down the streets, in an out of alleys, looking left and right. There was little hope that they, or anyone, would find the monkey. The monkey in his beggar outfit– the ideal urban camouflage– was hard to see. After a while, I saw the violinist and the girl went into a park, and sat on a bench. They just sat on the bench, apparently expecting the monkey to materialize right in front of them. That confused me. What is happening when my citizens are just sitting? People in love do stuff. They go bowling. They go see movies. They eat at restaurants. They copulate in boxes of various sizes. But sometimes they don’t do anything. They take themselves out of the mechanism, and are just sitting there, looking into the distant space, drifting off to some far away place. Yet it is in these most useless moments they look their most fulfilled. In my mind, success, contentment, happiness, fulfillment, etc., all have to do with good citizenry. My citizens do things &lt;i&gt;for&lt;/i&gt; each other, &lt;i&gt;to&lt;/i&gt; each other, &lt;i&gt;with&lt;/i&gt; each other: for &lt;strong&gt;ME&lt;/strong&gt;. “Doing” is the basic evaluation of good citizenship. Yet as I looked at the violinist and the girl, I was mesmerized. I was looking at something different and rare. It was a thing valuable in itself, unconditional. The magic in them has nothing to do with me, yet seems to be my highest purpose. Its existence, a delicate purple flower, a snowflake. It withers, it melts. But for the moment it exists, it is &lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;EXISTENCE&lt;/span&gt;&lt;/strong&gt;. While it is true, it is &lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;TRUTH&lt;/span&gt;&lt;/strong&gt;. As it is real, it is &lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;REALITY&lt;/span&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Then the girl’s cell phone rang, and I was brought back to ground from my mystic height. Or maybe it is more accurate to say that &lt;i&gt;they&lt;/i&gt; were brought back into my mechanism. In any case, after the phone call, the violinist and the girl started talking. Everything was back to normal.&lt;/p&gt;
&lt;p&gt;Once they started talking, they started arguing. My phone record informed me that it was a call from Cherry Patch Ranch, a brothel where the girl worked. I can’t (in general) hear through my eyes, but somebody taped the argument and put it on the Internet for me to hear. The argument went like this: She said some out-of-towners needed a girl with unshaved armpits. Since she had quit half a year ago, she was qualified. That’s why the Ranch called. She said the tourists would pay very well. He said he didn’t want her to do the job again. She said they needed the money, and it’s just a job. It would be all fun and no emotion. He said he couldn’t know if she would enjoy it. She said it doesn’t matter if she enjoyed it; in fact, all the better if she enjoyed it, for how often do people enjoy their work? Then he called her a whore. She didn’t say anything. Then he called her a fucking bitch in heat. Still, she didn’t say anything. Then he said he was sorry. She didn’t cry.&lt;/p&gt;
&lt;p&gt;Then they went their separate ways. The girl to her job, and the violinist to a lot of moping around. At this point, the constellation of gears was in alignment. John and Jane were plotted to meet. But they were still 15 minute apart. Another chain of events took place to pull them closer.&lt;/p&gt;
&lt;p&gt;In Jane’s childcare, a certain Boy A’s mother would come at 4 to pick him up. The mother was late for 5 minutes, because on her way to the childcare she ran into every red light. So Boy A had 5 extra minutes to play with Boy B. Boy A and Boy B wrestled for a toy. Just as Jane went over to stop them, Boy B tripped and hit his head on the edge of a table. The edge was chipped, Boy A got the toy, and tear, snot, blood muddied Boy B’s cheeks. And the carpet was stained. The result was that Boy B went to the emergency in emergency, and since the boy always had been the last kid to leave, Jane would get off work 10 minutes early. After destaining the carpet.&lt;/p&gt;
&lt;p&gt;So 5 minutes after John left the office building, I could see Jane leaving the childcare. They were on the same trajectory but 5 minutes apart. In a few minutes, I saw John entering the metro station lobby. Normally he would’ve flowed right down the escalator, on the platform, into the train, out of the train, up the escalator, onto the street, off the street onto the bus, off the bus and onto the street, and, finally, up the stairs, home. But it was John’s special day, because the violinist was playing in the lobby. Because the violinist got into a fight with his girlfriend– over servicing the tourists they helped earlier– because the chimpanzee got lost because the firetruck didn’t come because they were on the national news because of the perching iguana and the dead dog that chased the hotdog vendor. John likes violin music, so he took himself out of the streaming suits and dresses to listen. As he listened, Jane got closer. 5 minutes later, I saw Jane coming in. She also took herself out of the stream to listen. The time was 6:13pm, Tuesday. Their time converged.&lt;/p&gt;
&lt;p&gt;At 6:13pm, John and Jane were 0 minutes apart, but 5 feet separated. They looked at the violinist, they looked at people going by, they looked at the tilings and the ceiling, and they didn’t look at each other. At the end of the playing, they took turn dropping money into the violin case. Then they put themselves back into the stream flowing back home. Although the crowd swirled and ebbed, and John pushed this way, Jane pulled that way, carried within the current of the commuting herd, John and Jane never were drawn closer together or drifted further apart. They were like two flotsams connected by an invisible wire and kept apart by an invisible pole. They got on the train 5 feet apart, and got off the, apart by the same 5 feet. That 5 feet had to vanish. The outgoing platform gates slowed the flow down, and had funneling effect. As John and Jane inched their ways toward the gates, they inched toward each other. Lucky for John and Jane, and unlucky for Tim and Kim (that’s another story for another day), the gate Jane was heading toward broke down. As a result, Jane exited through the gate John used. Now she was directly behind him. If she reached out her arms, she could hug him. If he turned his head, he could kiss her. But they kept walking. Because everyone kept walking.&lt;/p&gt;
&lt;p&gt;A bit further ahead, I could see the lost monkey walking down the up escalator, treadmilling. The monkey was like a sluice gate. People formed a single line up until they reached the monkey, then they diffracted to two lines once they passed it. John and Jane got into the line. When John got to the monkey, he grabbed it by its arms, and spun it around. The monkey looked into John’s eyes, long and hard. Then it puffed its cheeks and blew its lips. Jane laughed. So John laughed too. At the top of the escalator, the monkey walked away to east, and John and Jane walked away to west, together.&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;However unlikely this story sounds, it happened.&lt;/p&gt;
&lt;p&gt;Accidents are random, and Randomness is unformed chaos. There are strayed dogs, hotdog vendors strewn randomly about my streets. Iguanas get trapped on random ledges. Tourists ask random strangers for directions to random places. Random kids bust, break, bruise, and scratch, scrape, split their random body parts. Random people go through traffic in random sequences of red and green. Random buskers do random things at random places. And random platform gates break down at random time for random lengths of time.&lt;/p&gt;
&lt;p&gt;But how did the specific strayed dog know to chase the specific hotdog vendor so it could die and delay John by 10 minutes? How did the specific Boy A and B know they had to delay Jane by 10 minutes? How did the Violinist know John likes Violin, and played at the right place at the right time?&lt;/p&gt;
&lt;p&gt;I don’t know how to account for it except to label it, perhaps arbitrarily, my Active Will.&lt;/p&gt;
&lt;p&gt;What, then, is the source of this Active Will? And what is the origin of my consciousness? I am the totality of my Citizens and what they say, what they do, and what they build. I am a colony of unthinking… citizens. These citizens interact with each other according to some rules, and give rise to structures and functions within my mind: cooperation, institutionalization, bureaucratization, fossilization. The apparent complexity of organization suggests “intelligence”. Yet the fundamental philosophical question remains: how can my soul arise from inert materials?&lt;/p&gt;
&lt;p&gt;I am conscious because my citizens are conscious.&lt;/p&gt;
&lt;p&gt;This seems a ridiculous answer. It doesn’t look like citizens have wills. They just act according to the rules. And more often than not, they act on a predictable schedule; whatever little deviations there may be would be better accounted for as random flux. It seems extravagant to assume wills in order to explain these insignificant tics caused by citizens deviating from their courses. Furthermore, if I say that people are conscious, it seems I also have to say their brains, bowels, limbs are conscious as well. Else how do I explain their consciousness? Given such an outlandish claim, am I forced to say, “Everything that is, is Mental. The world is turtles all the way down”? If I am willing to say that my citizens are conscious, I might as well say my garbage dumps are conscious too. Which is ridiculous.&lt;/p&gt;
&lt;p&gt;I have no answer for these objections. All I have is a mystic insight (for what it’s worth). As I said, there had been occasions where a few citizens at a time had taken themselves out of the flow. In such occasions, they become something less than citizens, yet something more. They become pure entities. They are atoms. They are pure Existence. There is no way to integrate them into my framework. At these moments, they are no longer part of me. I look at them, and cannot understand them as citizens. I look at them, and I lose my sense of Self. These… “people” transcend my ordinary conception.&lt;/p&gt;
&lt;p&gt;Words cannot reflect this mystic light, but I cannot doubt its truth. Though obscured by the thicket of my infrastructures, laws, and conventions, I still can see the gleams of will that radiate from these atomic particles. It doesn’t happen often, but it does happen. This is a most profound epiphany: I am a multiplicity of primitive wills. I am not one single consciousness, but the many that exists within the pulsing hearts of individual citizens.&lt;/p&gt;
&lt;p&gt;But as I said before, the freedom of my Citizen is my unfreedom. To the extent that they gain their Selves, they lose their identity as Citizens, and as such, I lose my identity as a City. They must not deviate too much. They must conform to my mechanisms most of the time. This free unfreedom is what gives the individual Individuality, and the unison Unity. I am Urban Project X. I am my 4,250,000 citizens, and they are me.&lt;/p&gt;
&lt;p&gt;So this is the mystery of mystery,&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;strong&gt;My Citizens are One. And I am Many.&lt;/strong&gt;&lt;/i&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Beautiful Happiness</title>
   <link href="http://www.metacircus.com/writings/2008/03/15/beautiful-happiness.html"/>
   <updated>2008-03-15T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2008/03/15/beautiful-happiness</id>
   <content type="html">&lt;p&gt;Monster Trucks are Beautiful.&lt;/p&gt;
&lt;p&gt;Beauty is important to me. I never knew how to defend my sense of beauty, except with a childish tantrum, &amp;#8220;This is my sense of beauty, and if you disagree with me, you are an idiot&amp;#8221;. At the same time that I find certain objects beautiful, the image of a monster truck leaping over flatten cars imposes itself upon my mind.&lt;/p&gt;
&lt;p&gt;I am forced to remember that there are people who sincerely find /that/ beautiful. I am not just saying monster trucks can be entertaining. More than entertaining, they can be, to some people, genuinely beautiful.&lt;/p&gt;
&lt;p&gt;This realization is distressing. If Beauty can mean monster trucks to some people, does it mean my sense of Beauty is as stupid as theirs?&lt;/p&gt;
&lt;p&gt;What can we say about competing senses of beauty?&lt;/p&gt;
&lt;p&gt;On the one hand, is a hopeless aesthetic relativism, that their beauty is as legitimate as mine. On the other, equally unpalatable, is to give up the sense of beauty altogether, and in so doing, I can avoid attributing the label &amp;#8220;Beauty&amp;#8221; upon monster trucks. But at the same time, I lose my ability to say that the things I hold dear are beautiful.&lt;/p&gt;
&lt;p&gt;If we cannot judge one sense of beauty better than another, it seems that either beauty is arbitrary, or that it doesn&amp;#8217;t exist.&lt;/p&gt;
&lt;h2&gt;Apples and Oranges&lt;/h2&gt;
&lt;p&gt;Of course, no real aesthete would be happy with this state of the affair. It can&amp;#8217;t be that Beauty is only in the eyes of the beholders.&lt;/p&gt;
&lt;p&gt;So some people are inclined to reduce the notion of beauty into a quip. One common thing we hear is that beauty is what&amp;#8217;s left after you&amp;#8217;ve taken away everything ugly.&lt;/p&gt;
&lt;p&gt;I sympathize with this view. And it is one sense of beauty I seize upon. There /is/ perfection to be found in taking away everything unnecessary. But it is only one sense.&lt;/p&gt;
&lt;p&gt;It leaves us puzzled when we stand in awe in front of La Sagrada Família. Here is a monstrous sense of beauty, to which we add and add. Here is no simple elegance, but an ornate piety that demands every last bit of your attention be filled with Holy Iconographies.&lt;/p&gt;
&lt;p&gt;If we learn anything from the innumerable recipes for beauty, it is that even if there might be criteria for its recognition and production, there&amp;#8217;s no one sense of it.&lt;/p&gt;
&lt;p&gt;That there are different senses of beauty is perhaps no reason to despair. We can say a cup of tea is beautiful in its calm ordinariness, and the highway system is beautiful in its bustling liveliness. But there need not be a unifying principle behind different visions of beauty.&lt;/p&gt;
&lt;p&gt;Just as we should be glad that we can fall in love with different kinds of people, we should be glad that there are different Gardens of Eden. The paradise may be flowing with milk and honey, or filled with steamy, wet sex.&lt;/p&gt;
&lt;h2&gt;Beautiful Happinesses&lt;/h2&gt;
&lt;p&gt;Alain de Botton&amp;#8217;s book, &amp;#8220;The Architecture of Happiness&amp;#8221;, contains the most lucid discussion of Beauty I ever read. De Botton is not one disposed to facile characterizations. Rather than reducing Beauty to a set of axioms, de Botton recognizes the full complexity of it, and takes you on a journey.&lt;/p&gt;
&lt;p&gt;Beauty, according to de Botton, is a perspective. It is the cumulation of personal values you hold dear. There&amp;#8217;s no judgement of beauty, except in the context of everything else that you stand for. Whether you subscribe to the scientific asceticism of the modernists, or the ornate piety of the medievalists, depends on your belief in the ideal way of living. How you imagine a good life decides your sense of beauty.&lt;/p&gt;
&lt;p&gt;Beauty, is your vision of happiness. Hence the title of his book.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The building we admire are ultimately those which, in a variety of ways, extol values we think worthwhile&amp;#8212; which refer, that is, whether through their materials, shapes, or colours, to such legendarily positive qualities as friendliness, kindness, subtlety, strength and intelligence. Our sense of beauty and our understanding of the nature of a good life are intertwined. We seek associations of peace in our bedrooms, metaphors for generosity and harmony in our chairs, and an air of honesty and forthrightness in our taps. We can be moved by a column that meets a roof with grace, by worn stone steps that hint at wisdom and by a Georgian doorway that demonstrates playfulness and courtesy in its fanlight window.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By casting Beauty in terms of human values, we can discuss the merits of arts just as we can any other human qualities of frugality, stinginess; splendor, vanity; serenity, apathy; power, cruelty. De Botton, alluding to Stendhal, highlights the rich varieties of Beauty.&lt;/p&gt;
&lt;h2&gt;Ugliness All Around&lt;/h2&gt;
&lt;p&gt;I love what de Botton says about artistic objects that they are small instances of (our sense of) perfections in a fundamentally uncaring, flawed world. We can&amp;#8217;t change the world (much) for the better, but at least, we can find a good armchair to sink into.&lt;/p&gt;
&lt;p&gt;We recognize the unfortunate imperfections, but are embolden by /our/ own little corners of the world. This is a sensible pluralistic happiness, without the danger of ideological fanaticism. We recognize the impossibility, and the injustice, of imposing our vision of happiness upon others. Perhaps we don&amp;#8217;t want to recreate the world in our own image, as Lenin, Hitler, Mao wanted to.&lt;/p&gt;
&lt;p&gt;We should learn to be satisfied with our small pieces of perfections, and let others enjoy theirs (even to our own distress). Yet Beauty in the small is hard to appreciate. How can we take seriously something so local, circumstantial, ephemeral, irrelevant, and useless?&lt;/p&gt;
&lt;p&gt;It is not easy to appreciate Beauty in all its human frailties. We don&amp;#8217;t like the idea that things we hold dear will pass away. As such, we are irresistibly drawn to claims of Beauty as divine, encompassing, universal, or absolute.&lt;/p&gt;
&lt;p&gt;With our eyes set so high, we become angry, because we think that the world failed to meet up to our ideal. Here is a beautiful brick house in the midst of urban slum. But rather than being invigorated by its humble beauty, we curse at the urban sprawl. We shake our fists at the cardboard boxes that are choking everything else out.&lt;/p&gt;
&lt;p&gt;Why is everything so ugly? We ask.&lt;/p&gt;
&lt;p&gt;Yet we forget&amp;#8230;&lt;/p&gt;
&lt;p&gt;In the midst of so much ugliness is something beautiful.&lt;/p&gt;
&lt;p&gt;To realize that beauty is the exception, and still be glad in what there is of it, requires an emotional maturity. De Botton says,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#8230;after coming up against some of the sterner setbacks which bedevil emotional and political life, we may well arrive at a more charitable assessment of the significance of beauty&amp;#8212; of islands of perfection, in which we can find an echo of an ideal which we once hoped to lay a permanent claim to. Life may have to show itself to us in some of its authentically tragic colours before we can begin to grow properly visually responsive to its subtler offerings, whether in the form of a tapestry or a Corinthian column, a slate tile or a lamp. It tends not to be young couples in love who stop to admire a weathered brick wall or the descent of a banister towards a hallway, a disregard of such circumscribed beauty being a corollary of an optimistic belief in the possibility of attaining a more visceral, definitive variety of happiness.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am hopelessly ideological. And I strain for that &amp;#8220;visceral, definitive variety of happiness&amp;#8221;. Yes. With unbounded vision of greatness, how can I be satisfied with a chair? But it hurts me with so much disappointment, resentment, and intolerance. I wish I can find some of that emotional maturity in me. De Botton goes on,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We may need to have made an indelible mark on our lives, to have married the wrong person, pursued an unfulfilling career into middle age or lost a loved one before architecture can begin to have any perceptible impact on us, for when we speak of being &amp;#8216;moved&amp;#8217; by a building, we allude to a bitter-sweet feeling of contrast between the noble qualities written into a structure and the sadder wider reality within which we know them to exist. A lump rises in our throat at the sight of beauty from an implicit knowledge that happiness it hints at is the exception.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Having read it many times, it still sends a chill down my spine.&lt;/p&gt;
&lt;h2&gt;Lisp is beautiful.&lt;/h2&gt;
&lt;p&gt;And I wondered what this says about what my cherished values are, and what my vision of happiness is.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t want to argue that Lisp is powerful. Either you /believe/ it, or you don&amp;#8217;t. If you have to ask, then you don&amp;#8217;t know, and most likely, can&amp;#8217;t know. It&amp;#8217;s like Jazz.&lt;/p&gt;
&lt;p&gt;So let me just say, Lisp is beautiful. I&amp;#8217;ll even agree with you that Lisp is more or less useless, and that you can do amazing work in (oh noes!) Java or Perl. But Lisp is beautiful in ways Java, Perl, Ruby, Python, C,  whatever, never can be.&lt;/p&gt;
&lt;p&gt;How is Lisp beautiful? The convention wisdom seems to be that of the major lisp dialects, Scheme, Common Lisp, and Emacs Lisp, Scheme is the most beautiful, but (arguably) not as practical as Common Lisp. And Emacs Lisp is just plain ugly with its 1970 backwardness.&lt;/p&gt;
&lt;p&gt;Nikodemus Siivola (I don&amp;#8217;t even know who he is!) compares Scheme and Common Lisp, that,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Schemer: &amp;#8220;Buddha is small, clean, and serious.&amp;#8221;&lt;br /&gt;
Lispnik: &amp;#8220;Buddha is big, has hairy armpits, and laughs.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This embodies the belief that the beauty of Lisp has something to do with its minimalism. The fact that a meta-interpreter for Lisp can be printed on half a page, and is &amp;#8220;the kernel of all languages&amp;#8221;, is taken to be the grounding claim of Lispy power, and by implication, beauty.&lt;/p&gt;
&lt;p&gt;So those seeking beauty asks how to get maximum power out of minimal parts. Scheme&amp;#8217;s modus operandi is to see how far lambda can take you. And Paul Graham&amp;#8217;s Arc is about finding the smallest set of axioms, and the shortest path, to a practical Lisp.&lt;/p&gt;
&lt;p&gt;This vision of Lisp is that of a crystalline consistency extending outward. Lisp all the way in, and Lisp all the way out. This /is/ a pleasing vision of elegance and simplicity. We are heartened, because despite the riotous complexity, we know that deep in the core, it&amp;#8217;s all but half a page.&lt;/p&gt;
&lt;p&gt;With this sense of Lispy beauty, I profess my love for it whenever I can, and feel sad that the whole world is not Lisp.&lt;/p&gt;
&lt;h2&gt;Ugly Lisp is Beautiful&lt;/h2&gt;
&lt;p&gt;Recently, I realized that Lisp is beautiful to me in another way. A way that resonates with my vision of happiness, and reflects better who I am.&lt;/p&gt;
&lt;p&gt;It is a vision of hope.&lt;/p&gt;
&lt;p&gt;I admire Scheme, but I don&amp;#8217;t feel like there&amp;#8217;s anything I can do for Scheme. It is perfect in its own ways. Same goes with Haskell, with its imposing austerity, I can only fall on my knees in awe. But again, there&amp;#8217;s not much I can do for Haskell. It is perfect.&lt;/p&gt;
&lt;p&gt;What I&amp;#8217;ve found, is that hope feeds on imperfections. For me, the dominant sense of beauty arising from Emacs rests on the fact that that it is so ugly! It is so ugly, you can&amp;#8217;t help it but to do something about it.&lt;/p&gt;
&lt;p&gt;And you can! This is incredibly empowering.&lt;/p&gt;
&lt;p&gt;The imperfections are there to challenge you. Imperfections are not braced with a stoic resignation of &amp;#8220;what is, is&amp;#8221;. Imperfections ask you to be better. Even as you are tortured by the particular stupidities of a Lisp system (CL, Emacs, Smalltalk, Erlang), if you have a vision of something better, you go ahead and do it!&lt;/p&gt;
&lt;p&gt;The saying that if you don&amp;#8217;t like it, you can change it, is more often than not, moot, as far as open source is concerned. I am unhappy with &lt;span class=&quot;caps&quot;&gt;KDE&lt;/span&gt;, but there&amp;#8217;s simply no way I am going to do anything about it. But within Lisp, the power in your hand to create a paradise is not an empty promise.&lt;/p&gt;
&lt;p&gt;With Lisp, you know perfection is a few macros away. Even if you can&amp;#8217;t reach perfection, you can inch toward it, or at least, make life a little more comfortable in one particular instance, so life as a whole becomes bearable.&lt;/p&gt;
&lt;p&gt;What Lisp is, then, is a trust in you, the lisp programmer, to create a better world. Even though the world fundamentally sucks, there&amp;#8217;s hope in changing the tiny bit surrounding you for the better, at least for the duration while you are here.&lt;/p&gt;
&lt;p&gt;This is my vision of happiness, and my youthful optimism.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Self-Help for Emo Kids</title>
   <link href="http://www.metacircus.com/writings/2008/02/25/self-help-for-emo-kids.html"/>
   <updated>2008-02-25T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2008/02/25/self-help-for-emo-kids</id>
   <content type="html">&lt;p&gt;Do you feel bad that you are not fulfilling your full potential? Are there things you know you can do, but for one reason or another, you are not doing? Perhaps life is too demanding. Perhaps job is too draining. Perhaps love is too consuming. But deep down, you know you can &lt;i&gt;be&lt;/i&gt; much more. Right?&lt;/p&gt;
&lt;p&gt;So you read self-help books.&lt;/p&gt;
&lt;p&gt;So I read self-help books.&lt;/p&gt;
&lt;p&gt;So you read productivity blogs.&lt;/p&gt;
&lt;p&gt;So I read productivity blogs.&lt;/p&gt;
&lt;p&gt;And they are no help. If self-help does help, then you (and I) would stop reading them. We all sense its futility, and we all laugh at the cleverness of the end-all self-help tip: stop reading me, and get to work!&lt;/p&gt;
&lt;p&gt;But we can&amp;#8217;t get to work. And we keep reading. 13 tips for X. 5 rules for Y. 7 habits for Z. Reading these feel good tripe is a symptom rather than a cure. This we only know too well.&lt;/p&gt;
&lt;p&gt;The paradox of the self-help men is this: we take a kind of pride in not being our best. I am such a slacker. I procrastinate endlessly. I just can&amp;#8217;t seem to get to work. We are apologetic when we make these confessions. But we are not shamed.&lt;/p&gt;
&lt;p&gt;There is a bitter-sweetness in this flaccid incapacity. I know I am not doing much, but with a twinkle in my eyes, and an ironic smile, I know you know I know I can be much more. I am not procrastinating&amp;#8212; I am waiting for inspiration. I am a genius, yet.&lt;/p&gt;
&lt;p&gt;This is the marketability of self-help. The point is not to get you to do anything. The point is to tell you that you are only using 10% of your brain. You &lt;i&gt;can&lt;/i&gt; be much more, and you know it. It is satisfying to know that if I reached for the heaven, the stars would be within my grasp.&lt;/p&gt;
&lt;p&gt;It is pornography.&lt;/p&gt;
&lt;h2&gt;Cheap Optimism&lt;/h2&gt;
&lt;p&gt;I hate the self-help &amp;#8220;literature&amp;#8221;. When I am goofing off, how can I possibly resist reading some blog titled &amp;#8220;how to wake up early&amp;#8221;, or &amp;#8220;how to sleep 2 hours a day&amp;#8221;. I hate Steve Pavlina and his new age bullshit. But sometimes I can&amp;#8217;t help but to read what he writes.&lt;/p&gt;
&lt;p&gt;Guilty pleasure, vicarious productivity.&lt;/p&gt;
&lt;p&gt;My trouble is, it all seem too easy, and the optimism naive. If you worked hard enough, you can be all that you can be. But the fact is, you can&amp;#8217;t work hard enough, and even if you worked hard enough, you might still fail.&lt;/p&gt;
&lt;p&gt;Failure is ok, sometimes you pick yourself up, sometimes you don&amp;#8217;t. Sometimes you learn something, sometimes it&amp;#8217;s arbitrary and you can do nothing much except to cry about it.&lt;/p&gt;
&lt;p&gt;Life is complicated, and more often than not, out of control. Yet self-help books tells you that if you are more self-aware, self-disciplined, or whatever, you can control your life.&lt;/p&gt;
&lt;p&gt;What else do you expect from popular self-help writers? Most people don&amp;#8217;t want to be told what they already know: life is hard, unfair, and you can&amp;#8217;t do much about it. So self-help writers paint a rosy picture. Cheap optimism sells well, as well as cheap romance sells.&lt;/p&gt;
&lt;p&gt;How well? Self-help is worth $8.5 billion in 2003.&lt;/p&gt;
&lt;p&gt;My sentiment is like the very first sentence of Camus&amp;#8217;s essay, The Myth of Sisyphus: &amp;#8220;There is but only one truly serious philosophical problem, and that is suicide.&amp;#8221; Camus asks, why is life worth living?  In parallel, the only truly serious self-help problem is that given the overwhelming probability that I won&amp;#8217;t amount to much, why should I put in any effort at all?&lt;/p&gt;
&lt;p&gt;We all need some kind of optimism. Optimism is good, but sugar coated sweetened candy makes me sick.&lt;/p&gt;
&lt;h2&gt;Sartre Writes Self-Help&lt;/h2&gt;
&lt;p&gt;I don&amp;#8217;t mean to be a snob, but Sartre changed my life more than did any amount of Oprah, Dr. Phil, or Steve Pavlina. Nobody expects optimism from &lt;i&gt;this&lt;/i&gt; chain smoking French Existentialist. After all, he&amp;#8217;s the one who wrote, &amp;#8220;hell is others&amp;#8221;. What does he care about helping me to help myself?&lt;/p&gt;
&lt;p&gt;That said, Sartre&amp;#8217;s essay &amp;#8220;Existentialism is a Humanism&amp;#8221; is probably the best self-help resource for sworn emo kids. Life sucks, then you die. But wait, there&amp;#8217;s more! Sartre wrote the essay to show &amp;#8220;a doctrine which makes human life possible&amp;#8221;. Life sucks, then you die&amp;#8230; that&amp;#8217;s better than nothing!&lt;/p&gt;
&lt;p&gt;This is Sartre&amp;#8217;s brand of optimism. And it works for me. What follows is my brand of self-help, with a Sartrean stink.&lt;/p&gt;
&lt;p&gt;Two concepts are central to Sartre&amp;#8217;s thought on existence. They are Nothingness and Invention. The nature of existence is summed up in the famous phrase, &amp;#8220;existence precedes essence&amp;#8221;. What Sartre means is that you come into the world without a predefined purpose (Nothingness), and it is only through choosing  to act (Invention), that you finally define yourself as something. Furthermore, this process of becoming something is ongoing. Every moment, you must invent yourself, you must choose, you must act.&lt;/p&gt;
&lt;p&gt;This is not easy.&lt;/p&gt;
&lt;h2&gt;God is Dead&lt;/h2&gt;
&lt;p&gt;To better appreciate what Sartre&amp;#8217;s point, let&amp;#8217;s consider the converse. One basic existential question is this: rather than not existing, why do I exist? Or made suitable for a Sunday School question, of the hundreds of millions of sperms that invaded mom, why did God pick me? The obvious answer is that God must have had a plan for me, even before I was born.&lt;/p&gt;
&lt;p&gt;Here is Isaiah 49:1-3 (&lt;span class=&quot;caps&quot;&gt;NIV&lt;/span&gt;),&lt;/p&gt;
&lt;pre&gt;

 1 Listen to me, you islands; 
       hear this, you distant nations: 
       Before I was born the LORD called me; 
       from my birth he has made mention of my name. 
 2 He made my mouth like a sharpened sword, 
       in the shadow of his hand he hid me; 
       he made me into a polished arrow 
       and concealed me in his quiver. 
 3 He said to me, &quot;You are my servant, 
       Israel, in whom I will display my splendor.&quot;
&lt;/pre&gt;
&lt;p&gt;That is to say, essence precedes existence.&lt;/p&gt;
&lt;p&gt;But to many, this is not a good answer. If my life has a predefined purpose, do I still have free will? Wouldn&amp;#8217;t it kinda suck if my purpose of life is to have my foreskin harvested by some God-inspired Israeli general for the LORD&amp;#8217;s splendor? Worse, what if there is no God, &lt;span class=&quot;caps&quot;&gt;AND&lt;/span&gt; I still get my foreskin harvested, only for some fairytale?&lt;/p&gt;
&lt;p&gt;That there is no God is the starting point of Sartre&amp;#8217;s optimism. Without God, we are nothing, and from Nothingness, we invent ourselves. This is freedom. But Nothingness, for Sartre, is not a pleasant idea like the Tabla Rosa, upon which you can draw rainbows with your multicolored box of crayons. No. The freedom afforded by Nothingness is, paradoxically, not liberating, but suffocating, with an ever prodding urgency. Sartre says, we are &amp;#8220;condemned to be free&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Sartre&amp;#8217;s Nothingness is a miserable, terrible thing. It is not calm and dissolving like Zen&amp;#8217;s Mu. It would be so much easier had God existed.&lt;/p&gt;
&lt;p&gt;Along the same line is Nietzsche&amp;#8217;s &amp;#8220;God is Dead&amp;#8221; aphorism. It is often popularized as a triumphant declaration of the death of religious nonsense, as it is exposed to the light of rationality. Taken in context, however, &amp;#8220;God is Dead&amp;#8221;, is more like a despairing, pathetic whimper: &amp;#8220;God is dead. God remains dead. And we have killed him. How shall we, the murderers of all murderers, comfort ourselves?&amp;#8221; And now that God is dead, and &amp;#8220;the churches&amp;#8230; the tombs and sepulchers of God&amp;#8221;, we are left without a purpose, we are Nothing, drifting in the great coldness of space:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What did we do when we unchained this earth from its sun? Whither is it moving now? Wither are we moving now? Away from all suns? Are we not plunging continually? Backward, sideward, forward, in all directions? Is there any up or down left? Are we not straying as through an infinite nothing? Do we not feel the breath of empty space? Has it not become colder?&lt;/p&gt;
&lt;p&gt;Nietzsche &amp;#8211; Gay Science (God is Dead aphorism.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Freedom from God(s) is disorienting. Starting from the denial of God, the plague of Nothingness spreads over and corrupts every other philosophical absolutes. No, you can&amp;#8217;t seek comfort in Plato&amp;#8217;s Forms, Kant&amp;#8217;s Imperatives, Spinoza&amp;#8217;s Nature, or Hegel&amp;#8217;s Dialectics. The freedom of Nothingness is total, enveloping, and overwhelming. Nietzsche, in Twilight of the Idols, rubs it in, and denies us of all higher ideal/purpose:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What alone can &lt;i&gt;our&lt;/i&gt; teaching be? &amp;#8212; That no one &lt;i&gt;gives&lt;/i&gt; a human being his qualities: not God, not society, not his parents or ancestors, no &lt;i&gt;be himself&lt;/i&gt; ( &amp;#8212; the nonsensical idea here last rejected was propounded, as &amp;#8220;intelligible freedom&amp;#8221;, by Kant, and perhaps also by Plato before him). &lt;i&gt;No one&lt;/i&gt; is accountable for existing at all, or for being constituted as he is, or for living in the circumstances and surroundings in which he lives. The fatality of all that which has been and will be. He is &lt;i&gt;not&lt;/i&gt; the result of a special design, a will, a purpose; he is &lt;i&gt;not&lt;/i&gt; the subject of an attempt to attain to an &amp;#8220;ideal of man&amp;#8221; or an &amp;#8220;ideal of happiness&amp;#8221; or an &amp;#8220;ideal of morality&amp;#8221; &amp;#8212; it is absurd to want to &lt;i&gt;hand over&lt;/i&gt; his nature to some purpose or other. &lt;i&gt;We&lt;/i&gt; invented the concept of &amp;#8220;purpose&amp;#8221;: in reality purpose is &lt;i&gt;lacking&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;Nietzsche &amp;#8211; Twilight of Idols&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is from this philosophical ruin that Sartre builds a philosophy. For thousands of years, philosophers had been quibbling on the essence of man, and what it means to live according to an ideal. Now, with God dead, we have to turn the basic existential question upside down.&lt;/p&gt;
&lt;h2&gt;Existentialism&lt;/h2&gt;
&lt;p&gt;I no longer ask &lt;i&gt;why&lt;/i&gt; I exist. I take my existence as a trivial fact, of no more moral significance than that my hair is black. The new existential question is this: given that by some fucked up cosmic accident I exist, what do I do?&lt;/p&gt;
&lt;p&gt;Sartre says, you have to choose, you have to act. You have to invent yourself from Nothingness. What ever your choosings, and the sum of your actions, is who you are. So your essence is something you have to work on, a work preceded by your existence.&lt;/p&gt;
&lt;p&gt;This is brutally common sensical. If you wrote a book, you did, and you are a writer. If you got an A in a class, then you did, and you are a good student.&lt;/p&gt;
&lt;p&gt;But there are no &amp;#8220;would be&amp;#8221;s, or &amp;#8220;could&amp;#8217;ve been&amp;#8221;s. You are not a would be writer if you have not written anything, and you could not have gotten a better grade had you worked harder.&lt;/p&gt;
&lt;p&gt;This is not to say that hard work is futile. What it &lt;i&gt;is&lt;/i&gt; saying, is that given you didn&amp;#8217;t work hard, by the doctrine of Nothingness, you couldn&amp;#8217;t have worked hard. It makes no sense to speculate on what &lt;i&gt;potentials&lt;/i&gt; there are in you that could&amp;#8217;ve been released by hard work, or what &lt;i&gt;essence&lt;/i&gt; in you that would fate you to an end.&lt;/p&gt;
&lt;p&gt;Without getting results, you are nothing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is no genius other than one which is expressed in works of art; the genius of Proust is the sum of Proust&amp;#8217;s works; the genius of Racine is his series of tragedies. Outside of that, there is nothing. Why say that Racine could have written another tragedy, when he didn&amp;#8217;t write it? A man is involved in life, leaves his impress on it, and outside of that there is nothing. To be sure, this may seem a harsh thought to someone whose life hasn&amp;#8217;t been a success. But, on the other hand, it prompts people to understand that reality alone is what counts, that dreams, expectations, and hopes warrant no more than to define a man as a disappointed dream, as miscarried hopes, as vain expectations. In other words, to define him negatively and not positively. However, when we say, &amp;#8220;You are nothing else than your life,&amp;#8221; that does not imply that the artist will be judged solely on the basis of his works of art; a thousand other things will contribute toward summing him up. What we mean is that a man is nothing else than a series of undertakings, that he is the sum, the organization, the ensemble of the relationships which make up these undertakings.&lt;/p&gt;
&lt;p&gt;Sartre- Existentialism is a Humanism&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a responsible (perhaps despairing) image of the self. There can be no delusional grandeur. We all have to stop kidding ourselves&amp;#8230; the fact that we are not working on a life project doesn&amp;#8217;t mean we could be working on it. It means no more and no less that these &amp;#8220;life&amp;#8221; projects are not a part of our lives.&lt;/p&gt;
&lt;p&gt;David Letterman once said, &amp;#8220;Everyone has a purpose in life. Perhaps yours is watching television.&amp;#8221; This is a cynical wisecrack, but has a lot of truth in it. While you are sitting there watching TV, waiting for inspiration to strike, you are a TV watcher, not a creative artist.&lt;/p&gt;
&lt;h2&gt;Absurdity&lt;/h2&gt;
&lt;p&gt;But Sartre seems to believe that anyone with enough existential courage and do-it-now gusto can write a Proust-lengthed novel. It&amp;#8217;s hard to take seriously Sartre&amp;#8217;s argument that because we are nothing, we can invent ourselves to be anything.&lt;/p&gt;
&lt;p&gt;There are limits. I cannot do Physics, I cannot dance, and I cannot see through walls or shoot lasers out of my eyes.&lt;/p&gt;
&lt;p&gt;Sure, I am not a would be writer. Sure, my dreams are miscarried dreams, false hopes. So? If work takes so much work, and I am so limited by my limitations, why should I bother? I won&amp;#8217;t accomplish much anyway, who cares?&lt;/p&gt;
&lt;p&gt;This is the true self-help question. You are mundane, you are boring, you are stupid, you are useless to humanity. How do you (and I) live with that? Perhaps life would be so much better if we are all geniuses.&lt;/p&gt;
&lt;p&gt;Or, perhaps not.&lt;/p&gt;
&lt;p&gt;In The Myth of Sisyphus, we have the image of a man cursed to roll a boulder up a hill, then watch it roll down, then roll it up again. So on to eternity. For Camus, this captures the condition of humanity.&lt;/p&gt;
&lt;p&gt;What&amp;#8217;s the point? There&amp;#8217;s no point. Yet he keeps doing it.&lt;/p&gt;
&lt;p&gt;This is Absurdity.&lt;/p&gt;
&lt;p&gt;Barney&amp;#8217;s song is pointless, and Beethoven&amp;#8217;s Symphonies no more pointful. Music goes in and out of fashion. We all die. Civilizations rise and fall. Humanity will go extinct. Universe will&amp;#8230; nobody knows what will happen, and nobody will be there to know.&lt;/p&gt;
&lt;p&gt;Whether you are genius or not makes no difference. We are all rolling boulders up a hill, and when we die, the boulders roll right back down. Some of us roll bigger boulders than others, but we are all Sisyphuses.&lt;/p&gt;
&lt;p&gt;Everyone is meaningless. Even if you can invent yourself out of nothing, your something remains nothing. 0+0=0.&lt;/p&gt;
&lt;p&gt;Yet just as we eschewed cheap optimism, cheap nihilism is something we should avoid. Both unchecked optimism and unqualified pessimism are too easy. Life is neither optimistic nor pessimistic.&lt;/p&gt;
&lt;p&gt;Life is utterly indifferent. It asks you to live without a higher purpose&amp;#8230; or to live with a religion. For those of us disinclined to fairytales, all we have to live on is the advice that we might as well try to enjoy it, whatever &amp;#8220;it&amp;#8221; is.&lt;/p&gt;
&lt;p&gt;Camus writes that it is all absurd, but &amp;#8220;the struggle itself is enough to fill a man&amp;#8217;s heart. One must imagine Sisyphus happy.&amp;#8221;&lt;/p&gt;
&lt;p&gt;We must imagine ourselves happy, as we roll the biggest boulders we can possibly roll, up a short, all too short, hill.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Be</title>
   <link href="http://www.metacircus.com/writings/2008/02/17/be.html"/>
   <updated>2008-02-17T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2008/02/17/be</id>
   <content type="html">&lt;p&gt;everything has been said&lt;br /&gt;
nothing can be said&lt;br /&gt;
anything may be said&lt;br /&gt;
but my mouth won&amp;#8217;t say.&lt;/p&gt;
&lt;p&gt;i love you. you love me.&lt;br /&gt;
my arms was around her.&lt;br /&gt;
his arms was around you.&lt;br /&gt;
i loved her, you loved him.&lt;/p&gt;
&lt;p&gt;the has been could have been,&lt;br /&gt;
the done to be undone.&lt;br /&gt;
it has been done,&lt;br /&gt;
we have yet to be.&lt;/p&gt;
&lt;p&gt;it&amp;#8217;s all new, and old,&lt;br /&gt;
and old, but renewed.&lt;/p&gt;
&lt;p&gt;everything has been said&lt;br /&gt;
nothing can be said&lt;br /&gt;
anything may be said&lt;br /&gt;
but my mouth won&amp;#8217;t say.&lt;/p&gt;
&lt;p&gt;so it has been,&lt;br /&gt;
so we have been,&lt;br /&gt;
so.&lt;br /&gt;
so.&lt;br /&gt;
so.&lt;br /&gt;
maybe.&lt;/p&gt;
&lt;p&gt;we will be.&lt;/p&gt;
&lt;p&gt;then.&lt;/p&gt;
&lt;p&gt;we will have been.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Laugh With</title>
   <link href="http://www.metacircus.com/writings/2007/12/07/laugh-with.html"/>
   <updated>2007-12-07T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2007/12/07/laugh-with</id>
   <content type="html">&lt;p&gt;We laugh.&lt;/p&gt;
&lt;p&gt;We laugh with friends. We laugh at others: the retarded, the deformed, the impoverished, and people of another race, religion, or nationality. At our most humble (or most pretentious) moment, we perhaps even laugh at ourselves. We sneer, scorn, and scoff. We grin, giggle, and guffaw. Comedy reveals a deeper meaning, yet we often find comedy in the meaningless. We find infinite shades of irony, sarcasm, and satire in the infinite varieties of human experience. Why do we laugh?&lt;/p&gt;
&lt;p&gt;We laugh &lt;strong&gt;with&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In this essay, I will show how laughter and humour are essential to social interaction, and vice versa, that social interaction is crucial for laughter and humour. We are laughing  beings, and we are social animals. The study of laughter and humour in its proper social context better reflects who we are, and how we interact with each other.&lt;/p&gt;
&lt;p&gt;Writers have variously described laughter as &amp;#8220;seizure&amp;#8221;, &amp;#8220;contortion&amp;#8221;, &amp;#8220;paroxysm of delight&amp;#8221;, or worse. Laughter is a physical act. But why do we universally go &amp;#8220;hahaha&amp;#8221;, &amp;#8220;bwahaha&amp;#8221;, &amp;#8220;muhahaha&amp;#8221;, rather than &amp;#8220;bababa&amp;#8221;, &amp;#8220;hagaga&amp;#8221;, or &amp;#8220;mudadada&amp;#8221;? To see the biological root of laughter, we can compare our own laughter to that of our next evolutionary kins. As Darwin and other primatologists have observed, young Chimps and young Orangs when tickled grin and make a chuckling sound. Their &amp;#8220;chuckling&amp;#8221; is a kind of rhythmic panting, reminiscent of the panting observed when chimps are engaged in rough and tumble (or sexual) play. Provine argues that the root of laughter is in the panting of play, from which laughter acquires its social significance. Laughter becomes a symbol, a gesture, to signal play. And in human, the primitive panting becomes the semi-linguistic &amp;#8220;ha-ha-ha&amp;#8221;, &amp;#8220;he-he-he&amp;#8221;, or &amp;#8220;ho-ho-ho&amp;#8221;. (Provine, ch-5)&lt;/p&gt;
&lt;p&gt;The above overview of laughter&amp;#8217;s biological origin as panting is suggestive, but relating laughter to the full richness of humour is much more tenuous. The first link of laughter to social relationship can be seen in tickling, an ancient response we share with apes, and probably other mammals. The puzzle that readily comes to mind is why can&amp;#8217;t we tickle ourselves? The answer, unbelievably, has to do with parasites and similar nuisances. The first thing to notice is that the response to tickling is a defensive avoidance. When tickled, a person attempts to withdraw the tickled body part. This suggests that the response to tickling and itch are similar&amp;#8212; one seeks to end the irritation. Secondly, the body regions most sensitive to tickling (erogenous zones, underarm, waist, ribs, foot&amp;#8230;) are those most vulnerable to parasites and aggressors. The most ticklish parts are also the most vigorously defended. These two observation suggests that tickling is closely related to itching caused by (perhaps threatening) external tactile stimulation.&lt;/p&gt;
&lt;p&gt;The body needs a way to detect a foreign object crawling up one&amp;#8217;s neck, and activate the sensorimotor mechanism to remove the object. This implies a mechanism to distinguish between tactile stimulation originating from some external source (e.g. a scorpion) or from oneself. It is appropriate to freak out when a scorpion is crawling up my leg, but not when I am touching my own leg. Here we have the answer why it&amp;#8217;s impossible to tickle oneself. It is because any stimulation originating from the self does not activate the body&amp;#8217;s defensive mechanism. There is a self/nonself detector to discriminate between self/nonself stimulation. This conclusion sounds like another &amp;#8220;just so&amp;#8221; story, but the claim supported by several studies. One such study is of a tickling machine controlled by the subject with a joystick. If the tickling movement of the machine is synchronized with the joystick movement, then there&amp;#8217;s no tickling sensation in the subject. If the tickling movement is dissociated from the joystick control, then there&amp;#8217;s is tickling sensation. In fact, the greater the dissociation, the stronger the tickling sensation. It is argued that the synchrony of motor control and sensory feedback cancel each other out, thus inhibiting the tickling sensation. Provine argues that tickling is the root of all social play (possibly through grooming). Tickling as social play triggers laughter. Tickling, then, is the most primitive form of &amp;#8220;humour&amp;#8221; that takes laughter as a social signal, beyond its origin as the natural consequence of rough and tumble physical play (panting).&lt;/p&gt;
&lt;p&gt;Zip forward a few evolutionary leaps, we will now consider the social role of humour in human interaction, and how it works in communication. Before delving into our investigation, we should first disambiguate the words &amp;#8220;laughter&amp;#8221; and &amp;#8220;humour&amp;#8221;, as many theories conflates the two. &amp;#8220;Laughter&amp;#8221; is that physical response when we go &amp;#8220;ha-ha-ha&amp;#8221;. &amp;#8220;Humour&amp;#8221; is what we do that tends to trigger laughter. In particular, it is perfectly possible to laugh when nothing is humourous. And humour is very sensitive to its context for its effectiveness in provoking laughter. One would be hard-pressed to amuse the court martial with humour. We will first see laughter as a semi-voluntary response in social interaction to enhance social bond, then we will see humour as a more developed sense of play to provoke laughter and establish social relationship.&lt;/p&gt;
&lt;p&gt;Laughter, like smile, is semi-voluntary. We have some degree of control, and can force ourselves to laugh. But in general we laugh spontaneously. Laughter, however, does not occur arbitrarily in a conversation. As other extra-linguistic cues like gesture and intonation, laughter is well integrated into the structure of speech. The most notable constraint is that laughter almost always follow a complete statement or question. Provine documents 1200 laugh episodes, all but 8 conform to this constraint. As a rule, we see, &amp;#8220;How are you doing? hahaha&amp;#8221;, and almost never, &amp;#8220;How are you hahaha doing?&amp;#8221; (Provine p37) Laughter follows speech structure in that there is a strong tendency for it to fit in the punctuation between utterances. This compare nicely with McNeill&amp;#8217;s study of hand gestures. McNeill notes that gestures do not occur arbitrarily, but are formed in synchrony with speech. In particular, a type of gesture McNeill calls the &amp;#8220;beat&amp;#8221;, which is used to mark &amp;#8220;the word or phrase it accompanies as being significant, not for its own semantic content, but for its discourse-pragmatic content.&amp;#8221; (McNeill p15-16) A beat is interesting in that the gesture is the same across particular utterances. A small up and down movement like the waving of a baton. It is a metalinguistic marker that signals the special role of an utterance, rather than an extralinguistic signal that augment the actual content of an utterance. In this sense, laughter is similar. Laughter marks the special social role of an utterance, with no regard to its specific semantic content. Laughter in its most common use is a social gesture that&amp;#8217;s far from what is generally considered as &amp;#8220;humour&amp;#8221;. Indeed, over the 1200 laugh episodes analyzed by Provine, the typical laughter causing utterances are humdrum like &amp;#8220;It was nice meeting you&amp;#8221;, or &amp;#8220;How are you?&amp;#8221;&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ve seen that laughter is a kind of gesture to mark the social significance of an utterance. What kind of social significance? Provine argues that at least one social role played by laughter is &amp;#8220;a signal of dominance or subservience.&amp;#8221; (Provine p30) And the /obvious/ corollary follows, that &amp;#8220;the desire by women for men who make them laugh may be a veiled request for dominant males.&amp;#8221; (Provine p35) Heh. Cheap chauvinism aside, how do we reconcile this view with other social roles of laughter and humour? Earlier I&amp;#8217;ve said laughter and humour has it&amp;#8217;s evolutionary origin in animal play (again, following Provine). It&amp;#8217;s not clear how to interpret dominance/subservience in the guise of play, or play as dominance/subservience. Provine doesn&amp;#8217;t explicitly resolve this tension between the different social roles of laughter. In fact, there&amp;#8217;s a disassociation in Provine&amp;#8217;s book between theoretic principles and claims based on ethnological studies. He hints at &amp;#8220;probable&amp;#8221; principles, but is reluctant to explicitly connect these principles to his claims, probably to avoid &amp;#8220;just-so&amp;#8221; stories. In the absence of explicitly stated principles, Provine&amp;#8217;s ethnological claims seem fragmentary, and even contradictory as in this case. Nevertheless, Provine mentions in passing that &amp;#8220;[l]aughter plays a somewhat similar, nonlinguistic role in social bonding, solidifying friendships and pulling people into the fold.&amp;#8221; (Provine p47) The crucial principle is social bonding; it underlies the dominance-subservience use of laughter, the social-play of laughter, and the ingroup-inclusion and outgroup-exclusion use of laughter.&lt;/p&gt;
&lt;p&gt;To see how the principle of social bonding underlies the different social roles of laughter, we need to consider of the participants in a laugh episode, who are laughing, who are not, and who are laughed at. To simplify the analysis, we can consider an interaction involving two people. When both participants are laughing, we have the sort of laughter interaction we are most familiar with. It is also the most innocuous, where the two are just having a good time, and in so doing, their relationship is enhanced. Less innocuously, we also laugh with each other /at/ others. Those we laugh /with/ are included in our social group, and those we laugh /at/ are excluded, and victimized by our sneer and ridicule. This use of laughter is well noted by Thomas Hobbes, where it is an expression of a &amp;#8220;sudden glory arising from some sudden conception of some eminency in ourselves, by comparison with the infirmity of others.&amp;#8221; Lastly, where there&amp;#8217;s an asymmetry in laugh between the participants, there&amp;#8217;s a power relation. We laugh /for/ our superiors in a sort of sycophantic buffoonery. We display a willingness to establish social bond with them. This claim is supported by ethnological studies that document the strategic use of laughter. People in the lower social rungs would giggle in the presence of the higher caste, as a self-humbling behavior (Provine p30-31). It is also documented that a woman laughs more in the presence of a man, especially if she&amp;#8217;s attracted to the man. How to interpret this particular piece of data depends on your political correctness. In any case, those who seeks to maintain an air of authority and superiority tend to refrain from giggling.&lt;/p&gt;
&lt;p&gt;The relationship between humour and laughter is like the relationship between language and small talk. Theoreticians are quick to analyze why humour is funny or how language communicate anything, yet they are slow to appreciate that more often, we engage in small talk not intending to communicate, or we laugh where nothing is funny. As discussed above, we laugh and we talk to each other in order to form and enhance social bonds. In a social interaction, the important question is not /what/ is exchanged, but the fact that something, anything, is exchanged. Puffs of air. Touch. Gifts. Seminal fluid. Whatever.&lt;/p&gt;
&lt;p&gt;We laugh for social reasons. Humour is just one of those things that make us laugh. I claimed early in this essay that humour is the artifact of our overdeveloped brain. What I am claiming is that all the sophistication we find in humour is a hypertrophism enabled by our intellectual capacity. The idea of hypertrophism is central in E.O. Wilson&amp;#8217;s account of human nature, in his book &amp;#8220;On Human Nature&amp;#8221;. He argues that biology endows us with certain tendencies, and throughout the generations, by an interaction between culture and genetics, these tendencies take on a life of their own. For example, by virtue of us being social animals, we attribute minds to others, and because of this, we have the tendency to attribute minds to objects as well. This anthropomorphizing tendency (among others) develops over the generations into religions in all their apparent absurdity. Similarly with laughter, our linguistic capability and sophisticated social skill fuel the development of humour to its full complexity. It is through this development that humour acquired its &amp;#8220;grammar&amp;#8221;, or &amp;#8220;Platonic form&amp;#8221;, something that is analyzable outside its social context.&lt;/p&gt;
&lt;p&gt;One influential theory of humour is that unmet expectations are funny. Why? Perhaps it can be traced back to its social origin. An unmet expectation in a social context is a violation of social expectation. The canonical example is perhaps, &amp;#8220;your ass looks fat&amp;#8230; just kidding!&amp;#8221; This &amp;#8220;joke&amp;#8221; of course doesn&amp;#8217;t work. But the general principle is clear: by reinterpreting a social gaffe as &amp;#8220;play&amp;#8221;, the violation of expectation is no longer taken as an offence. Whether this reinterpretation can occur depends on one&amp;#8217;s audience. If one wishes to be charitable, one forgives the social gaffe, and takes it as a joke. This is why a Jew can tell Jewish jokes, but Hitler can&amp;#8217;t. The violation itself isn&amp;#8217;t funny, rather, it&amp;#8217;s the reinterpretation that results in laughter. More precisely, the reinterpretation itself doesn&amp;#8217;t provoke laughter, but the final reinterpreted state of “play” does. This idea better explains why a comedian can do the same routine over and over, and audience would still roll on the floor. Each time we “forgive” anew. If unmet expectation is the whole story, then listening to a joke enough times, we would come to expect the unexpected. Finally, what sense do we make of the most rarefied forms of humour? Witticism, puns, and logical puzzles? Consider:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The barber that shaves everyone that doesn&amp;#8217;t shave himself.&lt;/li&gt;
	&lt;li&gt;A knife missing its blade and handle.&lt;/li&gt;
	&lt;li&gt;This is like deja vu all over again.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Marvin Minsky argues that others laugh at us to make us learn. Eventually &amp;#8220;we learn to produce the same effects entirely inside our own minds. We no longer need the ridicule of those other people, once we can make ourselves ashamed by laughing silently at our own mistakes.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Provine, Robert.&lt;/strong&gt; &lt;br /&gt;
&lt;a href=&quot;http://www.amazon.com/Laughter-Scientific-Investigation-Robert-Provine/dp/0670893757&quot;&gt;Laughter: A Scientific Investigation.&lt;/a&gt;&lt;br /&gt;
This book pins down the evolutionary origin of laughter pretty well, but it has precious little to do with what we ordinarily consider as humour. You have to connect the dots for yourself, as I tried to do in this essay. A nice read to ground Philosophical/Literary speculations on humour. Feel free to read it really fast. I would suggest skipping the final third of the book.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Minsky, Marvin.&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.amazon.com/Society-Mind-Marvin-Minsky/dp/0671657135/&quot;&gt;The Society of Mind.&lt;/a&gt;&lt;br /&gt;
A fascinating book. Lacking in hard evidence though. Minsky writes &lt;span class=&quot;caps&quot;&gt;VERY&lt;/span&gt; well. It’s amazing how he can explain stuff using ordinary language.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;McNeill, David.&lt;/strong&gt;&lt;br /&gt;
Hand and Mind: What Gestures Reveal About Thought.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wilson, Edward O.&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.amazon.com/Human-Nature-Edward-O-Wilson/dp/0674016386/&quot;&gt;On Human Nature&lt;/a&gt;&lt;br /&gt;
Wilson is an elegant writer. Thought provoking. Though after 30 years, it’s less scandalous than it probably was back then. Highly recommended.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Coffin For Two</title>
   <link href="http://www.metacircus.com/writings/2007/05/13/coffin-for-two.html"/>
   <updated>2007-05-13T00:00:00+08:00</updated>
   <id>http://www.metacircus.com/writings/2007/05/13/coffin-for-two</id>
   <content type="html">&lt;p&gt;&lt;i&gt;An optimist and a pessimist buried in a coffin together. They lie facing each other. A candle burns between them.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;A: The smell of earth.&lt;/p&gt;
&lt;p&gt;B: The smell of death.&lt;/p&gt;
&lt;p&gt;A: What are you talking about? It&amp;#8217;s quiet. It&amp;#8217;s calm. There&amp;#8217;s a zen-like serenity to be buried alive 5 feet underground.&lt;/p&gt;
&lt;p&gt;B: We have to get out of here!&lt;/p&gt;
&lt;p&gt;A: What&amp;#8217;s the hurry?&lt;/p&gt;
&lt;p&gt;B: You are not going to do anything? You are just going lie here and die?&lt;/p&gt;
&lt;p&gt;A: Of course I am going to do something. There is still oxygen. I still have time. And I have you.&lt;/p&gt;
&lt;p&gt;B: I am not going to have sex with you. Not now.&lt;/p&gt;
&lt;p&gt;A: In the dark then? I&amp;#8217;ll blow out the candle.&lt;/p&gt;
&lt;p&gt;B: Nooo! The light is our only hope.&lt;/p&gt;
&lt;p&gt;A: But it takes too much oxygen.&lt;/p&gt;
&lt;p&gt;B: We can&amp;#8217;t do anything in the dark.&lt;/p&gt;
&lt;p&gt;A: We can grope each other in the dark.&lt;/p&gt;
&lt;p&gt;B: I don&amp;#8217;t know how you can possibly think about sex.&lt;/p&gt;
&lt;p&gt;A: I don&amp;#8217;t know why you are so morbid. Don&amp;#8217;t you find it funny?&lt;/p&gt;
&lt;p&gt;B: Funny?&lt;/p&gt;
&lt;p&gt;A: Buried alive in a coffin. I mean, I don&amp;#8217;t even know how we got here. Why, of everyone, I am paired up with you? It&amp;#8217;s absurd.&lt;/p&gt;
&lt;p&gt;B: Absurd, maybe. Funny?&lt;/p&gt;
&lt;p&gt;A: Maybe it&amp;#8217;s not funny to us. But had it happened to somebody else, it would be pretty damn funny. You know, some wise guy once said that God is a comedian playing to an audience too afraid to laugh. Well, actually we are acting in a comedy all the while thinking it&amp;#8217;s a fucking tragedy. Had we really been in the audience, we&amp;#8217;d be laughing, instead of sulking all the time.&lt;/p&gt;
&lt;p&gt;B: Get a grip of yourself. You are just giving up out of despair. We&amp;#8217;ll get out of here.&lt;/p&gt;
&lt;p&gt;A: Ok, tell me, how?&lt;/p&gt;
&lt;p&gt;B: Oh I don&amp;#8217;t know. Have some imagination. Think outside the box.&lt;/p&gt;
&lt;p&gt;A: There isn&amp;#8217;t anything outside the &amp;#8220;box&amp;#8221;. Nobody is looking for us. Nobody is coming to save us. &lt;span class=&quot;caps&quot;&gt;NOBODY&lt;/span&gt; IS &lt;span class=&quot;caps&quot;&gt;OUT&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;THERE&lt;/span&gt;!&lt;/p&gt;
&lt;p&gt;B: Who put us here then? Somebody &lt;span class=&quot;caps&quot;&gt;HAD&lt;/span&gt; to put us here. That proves somebody is out there.&lt;/p&gt;
&lt;p&gt;A: Darwin.&lt;/p&gt;
&lt;p&gt;B: Who?&lt;/p&gt;
&lt;p&gt;A: The blind coffin maker. Selection of the fittest. Come to think of it, this coffin fits us just right. Remarkable, isn&amp;#8217;t it, how life adapts.&lt;/p&gt;
&lt;p&gt;B: Somebody would come to save us.&lt;/p&gt;
&lt;p&gt;A: Nobody is coming. They are all in their own coffins, too fucking busy. Or vice versa.&lt;/p&gt;
&lt;p&gt;B: We at least have to get the message out. To let people know we were here. Who we were. Have you got fingernails? We&amp;#8217;ll make some scratch marks.&lt;/p&gt;
&lt;p&gt;A: What&amp;#8217;s the point?&lt;/p&gt;
&lt;p&gt;B: Don&amp;#8217;t be so nihilistic. Don&amp;#8217;t you have stories to tell?&lt;/p&gt;
&lt;p&gt;A: Ya sure. I can tell you my stories&amp;#8230;&lt;/p&gt;
&lt;p&gt;B: We don&amp;#8217;t have time. Think! How do we get out of here? How do we let other people know we are trapped? How do we tell them that there are other people trapped, just like us?&lt;/p&gt;
&lt;p&gt;A: This is &lt;span class=&quot;caps&quot;&gt;OUR&lt;/span&gt; death. You are making it much grander that it is. You are making a tragedy out of it.&lt;/p&gt;
&lt;p&gt;B: You are going to die a meaningless death?&lt;/p&gt;
&lt;p&gt;A: How can death be meaningful? Before the oxygen runs out, I am committed to making my life count. I have you here with me. And I am going to love you as much as I can. Before the oxygen runs out.&lt;/p&gt;
&lt;p&gt;B: I am not going to have sex with you!!&lt;/p&gt;
&lt;p&gt;A: Carpe Diem! Memento Mori! Etc!&lt;/p&gt;
&lt;p&gt;B: So you are determined to die here. You are not going to make &lt;span class=&quot;caps&quot;&gt;ANY&lt;/span&gt; effort to get out.&lt;/p&gt;
&lt;p&gt;A: We are &lt;span class=&quot;caps&quot;&gt;PRE&lt;/span&gt;-determined to die here. There is at least the comfort of certainty. There&amp;#8217;s no getting out, so try to make the best of it. You know I love you.&lt;/p&gt;
&lt;p&gt;B: What!? It&amp;#8217;s all arbitrary! I am randomly paired up with you. You could just as well loved any random person in any random coffin for two.&lt;/p&gt;
&lt;p&gt;A: You don&amp;#8217;t love me?&lt;/p&gt;
&lt;p&gt;B: I love you. But there&amp;#8217;s got to be something more than plain old hippie love&amp;#8212; daisies and pansies, heart and chocolate and all. Why are we paired up?&lt;/p&gt;
&lt;p&gt;A: Why not? I would&amp;#8217;ve been happy with anyone, but of the whole human population divided by two, I am happy with you in our coffin for two. Isn&amp;#8217;t there something very special about this improbability?&lt;/p&gt;
&lt;p&gt;B: That&amp;#8217;s nice. I am special. Just like everybody else.&lt;/p&gt;
&lt;p&gt;A: You are special to me.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;The candle flickers out.&lt;/i&gt;&lt;/p&gt;</content>
 </entry>
 
 
</feed>
